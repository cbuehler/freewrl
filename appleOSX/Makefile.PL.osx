# Copyright (C) 1998 Tuomas J. Lukka 1999, 2005, 2006 John Stewart CRC Canada.
# DISTRIBUTED WITH NO WARRANTY, EXPRESS OR IMPLIED.
# See the GNU Library General Public License (file COPYING in the distribution)
# for conditions of use and redistribution.

# what OS are we running under?
chomp ($pwd = getcwd());

# What compilers do we have?
my $JAVAC = `which javac`;
my $JAR = `which jar`;
if (($JAVAC eq "") || ($JAR eq "")) { 
	print "can not find a java compiler and archiver  - skipping java class making\n";
	$JAVAC = "";
}

# some versions of Linux require the command 
#chcon -t texrel_shlib_t /usr/lib/libFreeWRL*so to be run.

my $CHCON = `which chcon`;
if ($CHCON eq "") {print "chcon command not on system; will NOT run it on install.\n";}
if ($CHCON ne "") {print "chcon command found, will run it on install.\n";}
$CHCON =~ s/\s+$//;

print "\n";
print "This install is running on an Apple OS X computer\n";

use Cwd qw(getcwd chdir);

# get the correct.conf file.
require './vrml.conf.aqua';

my $vers = `cat ../versions/FREEWRL`;
$vers =~ s/\s+$//;
$VRML_CONFIG{VERSION} = $vers;

# where are we installing fonts, etc?
if ("" eq $VRML_CONFIG{INSTALL_DIR}) {
	print "do not have an INSTALL_DIR defined, assuming /usr/share\n";
	$VRML_CONFIG{INSTALL_DIR} = "/usr/share";
}

# save this for JS/Makefile.PL
$VRML_CONFIG{PLATFORM} = "Darwin";

## Handle platform-specific compile options for the Javascript engine
## and others specific to FreeWRL.

my $noStackProtector = "";

my @inc;
my @libs;
my @ldflags;



#location of the spidermonkey js engine.




######################
# Stack Protector flag. Some gcc compiler environments REQUIRE this flag.
# just check to see if it exists.

my $ok;
system ("echo \"int main(){}\" > sp.c");
$ok = system ("gcc -fno-stack-protector sp.c 2>0");
system ("rm sp.c");

# did this -no-stack-protector flag compile ok? If so, lets include it
if ($ok eq 0) { 
	print "adding -fno-stack-protector flag to compiles\n";
	system ("rm a.out");
	$noStackProtector = "-fno-stack-protector";
} else {
	print "this system does not use the -fno-stack-protector flag\n";
}

push @inc, $VRML_CONFIG{FREEWRL_INC}, 
	"-I../src/lib ",
	" -IOSX_Specific ";
push @libs, $VRML_CONFIG{FREEWRL_LIBS}, "-ljs";
#JASpush @libs, $VRML_CONFIG{FREEWRL_LIBS}, "-ljs";
push @ldflags, $VRML_CONFIG{LDFLAGS};

# push build directory, for running standalone
$VRML_CONFIG{FREEWRL_INC} = join(' ', @inc);
$VRML_CONFIG{FREEWRL_LIBS} = join(' ', @libs);

if (defined $VRML_CONFIG{'USE_JAVA_HOME'})
{
	$VRML_CONFIG{JAVA} = $ENV{JAVA_HOME}.'/bin/java';
	$VRML_CONFIG{JAVA_INST} = $ENV{JAVA_HOME};
}

#put the version to a file that is compiled
open OUT, ">../src/lib/JOHNS_lib_version.c" or die ("Couldn't write to JOHNSversion file");
my $vers = `cat ../versions/FREEWRL`;
$vers =~ s/\s+$//;

print OUT "char *freewrl_get_version(void) { return \"",$vers,"\";}";
print OUT "char *libFreeWRL_get_version(void) { return \"",$vers,"\";}";
close OUT;

# print out the CFuncs/vrmlconf.c C header file.
open OUT, ">OSX_Specific/config.h" or die("Couldn't write to CFuncs/vrmlconf.h");
print OUT "/* AUTOMATICALLY GENERATED BY TOP-LEVEL MAKEFILE.PL -- DO NOT EDIT */\n\n\n";
# is this building on a Darwin/OSX machine? if so, lets define AQUA.
print OUT "#ifndef AQUA\n#define AQUA\n#endif\n";
print OUT "#define INSTALLDIR \"$VRML_CONFIG{INSTALL_DIR}/freewrl\"\n";
print OUT "#define FONTS_DIR \"$VRML_CONFIG{INSTALL_DIR}/freewrl/fonts\"\n";
# lets write some generated #defines.
print OUT "#define HAVE_STDINT_H 1\n";
print OUT "#define HAVE_STDBOOL_H 1\n";
print OUT "#define HAVE_UNISTD_H 1\n";
print OUT "#define HAVE_SYS_WAIT_H 1\n";
print OUT "#define HAVE_PTHREAD 1\n";
print OUT "#define HAVE_CONFIG_H 1\n";
print OUT "#define BUILDDIR \"$pwd\"\n";
print OUT "#define FWVER \"",$vers,"\"\n";
print OUT "#define FREEX3D_MESSAGE_WRAPPER \"/usr/bin/say\"\n";
print OUT "#define FREEWRL_MESSAGE_WRAPPER \"/usr/bin/say\"\n";
print OUT "#define REWIRE_SERVER \"",$VRML_CONFIG{BIN_DIR},"/freewrlReWireServer\"\n";
print OUT "#define SOUNDSERVERBINARY \"",$VRML_CONFIG{BIN_DIR},"/FreeWRL_SoundServer\"\n";
print OUT "#include <stdio.h>\n";
print OUT "#include <stdlib.h>\n";
print OUT "#include <stdbool.h>\n";
print OUT "#include <string.h>\n";
print OUT "#include <sys/stat.h>\n";
print OUT "#include <sys/time.h>\n";
print OUT "#include <dirent.h>\n";
print OUT "#include <fcntl.h>\n";
print OUT "#include <expat.h>\n";
print OUT "#include <internal.h>\n";
print OUT "#define HAVE_STDINT_H 1\n";
print OUT "#define HAVE_STDBOOL_H 1\n";
print OUT "#define HAVE_UNISTD_H 1\n";
print OUT "#define HAVE_SYS_WAIT_H 1\n";
print OUT "#define HAVE_PTHREAD 1\n";


findAndPrintUtilities();


close OUT;



#######################################################################################
# write the Makefile
#######################################################################################

open MK, ">Makefile" or die("Couldn't write the Makefile");

writeMakefileInitialize();
writeVariables();
writeAllTarget();

writeMakefileLibFreeWRL();

write_linux_makefile_javaClasses();
writeMakefileDistclean();
writeMakefileFinalTargets();

print "The Makefile has been generated. Type \"make\" and\/or \"make install\" to build (and install)\n\n";

sub writeAllTarget () {
	# should edit this line to suit build
	print MK "all: libFreeWRL";
	if ($JAVAC ne "") {print MK " JavaClasses";}
	if ($VRML_CONFIG{SOUND_ENGINE}) { print MK " SoundEngine"; }
	print MK "\n";
}

sub writeMakefileInitialize() {	
	my $FELIBS = "";

	my $FRONTEND_DIR  = $VRML_CONFIG{BIN_DIR};
	my $LIB_DIR       = $VRML_CONFIG{LIB_DIR};
	my $MYINC         = $VRML_CONFIG{FREEWRL_INC};
	my $MYLIBS 	= $VRML_CONFIG{FREEWRL_LIBS};

        my $MYLDFLAGS     = $VRML_CONFIG{LDFLAGS};

	my $MYDEFINE      = $VRML_CONFIG{FREEWRL_DEFINE};

	$MYFELIBS =  "-L. -lpthread ";

	my $MYSELIBS = "-lm ";
	my $MYMESLIBS = "-lXaw ";

	# are we compiling the front end with Motif or GTK2?
	if (index ($VRML_CONFIG{FREEWRL_DEFINE},"HAVE_MOTIF") > 0) {
		 $MYFELIBS = $MYFELIBS . " -lXm ";
	}

	# add on the shared libs, etc. to MYFELIBS for making the freewrl executable.
	# NOTE: order of linking is important; the javascript library should be near
	# the end.
	my $MYFELIBS =  $MYFELIBS." ".$MYLIBS;
	
	
	# do the headers.
	print MK "#Make file for FreeWRL\n";
	print MK "CC = gcc\n";
	print MK "JAVAC = javac\n";
	print MK "INC = $MYINC\n";
	print MK "DEFINE = $noStackProtector $MYDEFINE\n";

	print MK "FWFLAGS = -V 4.0.1 -c -Wall -O2 -g -pipe -fno-strict-aliasing -fPIC\n";
	print MK "MYLIBS = $MYLIBS\n";
	print MK "MYFELIBS = $MYFELIBS\n";
	print MK "MYSELIBS = $MYSELIBS\n";
	print MK "MYMESLIBS = $MYMESLIBS\n";
	print MK "FRONTEND_DIR = $FRONTEND_DIR\n";
	print MK "LIB_DIR = $LIB_DIR\n";
	print MK "JAVAC = $JAVAC\n";
	print MK "JAR = $JAR\n";
	print MK "INSTALL_DIR = $VRML_CONFIG{INSTALL_DIR}\n";

	print MK "CFLAGS = \$(FWFLAGS) \$(INC) \$(DEFINE)\n";

	print MK "MYLDFLAGS = $MYLDFLAGS\n";

}
	
sub writeMakefileFinalTargets() {
	print MK "\n";

	print MK "install:\tall	\n";
	if ($VRML_CONFIG{SOUND_ENGINE}) { 
		print MK "\tinstall -D SoundEngine/FreeWRL_SoundServer \$(DESTDIR)\$(FRONTEND_DIR)/FreeWRL_SoundServer\n";
	}

	
	if (($JAVAC ne "") && ($VRML_CONFIG{NETSCAPE_INST} ne "")) {
		print MK "\tinstall -d  \$(INSTALL_DIR)\/freewrl\n";
		print MK "\tinstall ../../freewrl/java/classes/vrml.jar \$(INSTALL_DIR)\/freewrl\n";
	}
	print MK "\tcp -f ./OSX_Specific/freex3d.aquascript /usr/bin/freex3d\n";
	print MK "\tchmod 755 /usr/bin/freex3d\n";
	print MK "\tcp -f ./OSX_Specific/freewrl.aquascript /usr/bin/freewrl\n";
	print MK "\tchmod 755 /usr/bin/freewrl\n";

	# for the libEAI
	print MK "\tcp -f ../src/libeai/EAI_C.h /usr/local/include\n";
	print MK "\tcp -f ../src/lib/input/EAIheaders.h /usr/local/include\n";
	print MK "\tcp -f ../src/libeai/X3DNode.h /usr/local/include\n";
	print MK "\tcp -f ../src/libeai/GeneratedHeaders.h /usr/local/include\n";
	
	print MK "\tinstall -d \$(INSTALL_DIR)/freewrl/fonts\n";
	print MK "\tinstall ./OSX_Specific/fonts/*.ttf \$(INSTALL_DIR)/freewrl/fonts\n";
	print MK "\tinstall ./OSX_Specific/fonts/*.TXT \$(INSTALL_DIR)/freewrl/fonts\n";
	print MK "\tinstall ./OSX_Specific/fonts/*.conf \$(INSTALL_DIR)/freewrl/fonts\n";
}

sub writeVariables () {	
	my @CFuncsSourceFiles = split (' ',`find ../src  | grep -v "src/plugin" | grep -v statusbarHud.c | grep -v statusbarConsole.c | grep -v statusbarStub.c | grep -v libeai | grep -v "options.c" | grep -v "npunix" | grep -v "/sound/" | grep -v fwWindow32 | grep -v fwBareWindow | grep -v display_x11 | grep -iv motif | grep -v fwCommonX11 | grep -v win32 | grep "\\.c\$" `);

	print MK "\n#CFuncs Make\n";
	print MK "LIBFWSRCS=";
	foreach my $fullname (@CFuncsSourceFiles) { print MK "$fullname "; }
	print MK "\n";
	print MK "LIBFWOBJS=";
	foreach my $fullname (@CFuncsSourceFiles) { $fullname =~ s/.c$/.o/; print MK "$fullname "; }
	print MK "\n\n";
	
	my @SoundEngineSourceFiles = split (' ',`ls SoundEngine/*c`);
	print MK "\n#SoundEngine Make\n";
	print MK "SESRCS=";
	foreach my $fullname (@SoundEngineSourceFiles) { print MK "$fullname "; }
	print MK "\n";
	print MK "SEOBJS=";
	foreach my $fullname (@SoundEngineSourceFiles) { $fullname =~ s/.c$/.o/; print MK "$fullname "; }
	print MK "\n\n";
}


sub writeMakefileLibFreeWRL() {
	#############################################################################
	#LIBFREEWRL
	print MK "\$(LIBFWSRCS):\n";
	print MK "\t\$(CC) -c \$*.c\n\n";
	print MK "libFreeWRL:      \$(LIBFWOBJS)\n";
	print MK "\t\$(CC) -dynamiclib \$(MYFELIBS) \$(MYLDFLAGS) -o libFreeWRLFunc.dylib  \$(MYLIBS) \$(LIBFWOBJS)\n\n";
}


sub write_linux_makefile_javascript() {
	#############################################################################
	## make the Javascript libraries if needed
    
	print MK "Javascript:\n";
}



sub write_linux_makefile_javaClasses() {
	if ($JAVAC ne "" ) {
		my @JavaSourceFiles = split (' ',`find ../../freewrl -name "*java" | grep "java\/classes"`);

		foreach my $fullname (@JavaSourceFiles) {
			# remove the Java from the front, and the .c from the end.
			my $nm = $fullname;
			$nm =~ s/^\.\///; $nm =~ s/.java$/.class/;
	
			print MK "$nm:\n	\$(JAVAC) -classpath ../../freewrl/java/classes $fullname\n";
		}
		
		print MK "JavaClasses:\t";
		foreach my $fullname (@JavaSourceFiles) {
			# remove the Java from the front, and the .c from the end.
			my $nm = $fullname;
			$nm =~ s/^\.\///; $nm =~ s/.java$/.class/;
	
			print MK "$nm ";
		}
		print MK "\n";
	
		# make the jar file here
		print MK "	\$(JAR) -cf ../../freewrl/java/classes/vrml.jar $@ `find ../../freewrl/java/classes/vrml -name *.class`\n";
	}
}

sub writeMakefileDistclean() {
	#############################################################################
	# Misc targets
	print MK "\nclean:\n";
	print MK "	rm -f libFreeWRLFunc.so\n";
	print MK "	rm -f freewrl\n";
	if ($VRML_CONFIG{SOUND_ENGINE}) {
		print MK "	rm -f ../../SoundEngine/*o\n";
		print MK "	rm -f ../../SoundEngine/FreeWRL_SoundServer\n";
	}
	print MK "	rm -f ../../freewrl/java/classes/vrml/external/field/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/vrml/field/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/vrml/external/node/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/vrml/external/FreeWRLEAI/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/vrml/external/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/vrml/external/exception/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/vrml/node/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/vrml/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/vrml/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/sai/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/sai/eai/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/org/web3d/x3d/sai/*class\n";
	print MK "	rm -f ../../freewrl/java/classes/vrml.jar\n";

	print MK "	rm -f ../src/bin/*\.o\n";
	print MK "	rm -f ../src/lib/*\.o\n";
	print MK "	rm -f ../src/lib/input/*\.o\n";
	print MK "	rm -f ../src/lib/main/*\.o\n";
	print MK "	rm -f ../src/lib/opengl/*\.o\n";
	print MK "	rm -f ../src/lib/plugin/*\.o\n";
	print MK "	rm -f ../src/lib/scenegraph/*\.o\n";
	print MK "	rm -f ../src/lib/ui/*\.o\n";
	print MK "	rm -f ../src/lib/vrml_parser/*\.o\n";
	print MK "	rm -f ../src/lib/world_script/*\.o\n";
	print MK "	rm -f ../src/lib/x3d_parser/*\.o\n";
	print MK "	rm -f ../src/lib/non_web3d_formats/*\.o\n";
	print MK "	rm -f ../src/message/*\.o\n";
	print MK "	rm -f /usr/local/lib/libFreeWRLFunc.dylib\n";

	# remove other JS directories

	print MK "\n#remove installed images\n";
	print MK "distclean:	clean\n";
	
	if ($VRML_CONFIG{SOUND_ENGINE}) { 
		print MK "\trm -f \$(DESTDIR)\$(FRONTEND_DIR)/FreeWRL_SoundServer\n";
	}

	print MK "\trm -rf \$(DESTDIR)\$(INSTALL_DIR)/freewrl/fonts\n";
	print MK "\trm -rf \$(DESTDIR)\$(INSTALL_DIR)/freewrl/x3d\n";
}



###################################################################################
# determine on what system we are running, and if we can make a package for it for
# redistribution
sub linux_system_info() {
	
	my $rpm_prefix;
	my $osname;
	my $mightBeUbuntu = FALSE;
	
	# determine where the package should be built.
	# is this a Red Hat, Fedora package?
	#rpm_prefix = "/tmp";
	if (-e '/usr/src/redhat') {
		$rpm_prefix = "/usr/src/redhat";
	
	# is this SuSE/Novell linux??
	} elsif (-e '/usr/src/packages') {
		$rpm_prefix = "/usr/src/packages";

	# yikes - do not know...
	} else { $rpm_prefix = "/tmp"; }
		
	# what OS version is this built on? each Linux release has a different
	# file name here - might be /etc/SuSE-release. 

	my $distrib = `lsb_release --id | cut -f2`;
	$distrib =~ s/\b(\w)/\U$1/g;
	# remove trailing cr
	$distrib =~s/\n.*//;

	my $ver = `lsb_release --release | cut -f2`;
	# remove trailing cr
	$ver =~s/\n.*//;

	$osname = $distrib.$ver;
	
	if ($osname eq "") {
		print "could not determine how to make redistributable packages on this system \n";
		print "so the make rpm target will not work - oh well!\n";
		$osname = "unknown";
	}
	#print "osname is: $osname\n";
	
	
	# sourcepackage is a file created by "packagemaker" - it contains the version, etc.
	my $sourcepackage = `cat sourcepackage`;
	# remove whitespace at beginning and end of this package name (check packagemaker in CVS tree)
	$sourcepackage =~ s/\s+$//;
	$sourcepackage =~ s/^\s+//;
	my $srcdir = substr($sourcepackage, 0, rindex ($sourcepackage,".tar"));
	my $rpmversion = substr ($srcdir,index($srcdir,"-")+1,100);
	#print "srcdir $srcdirrpmversion $rpmversion sourcepackage $sourcepackage\n";
	
	# make spec file name.
	my $specfile = "$rpm_prefix/SPECS/".$srcdir.".".$osname.".spec";
	#print "spec file is $specfile\n";
	
	return ($rpm_prefix,$sourcepackage, $rpmversion, $osname, $specfile);
}

sub findAndPrintUtilities() {
	# lets just dump out some standard defines, from the vrml.conf file.
	my @dumpToVRMLCONF = ( "BROWSER", "SOUNDCONV", "UNZIP", "WGET", "CONVERT", "JAVA");

	my $val;

	foreach (@dumpToVRMLCONF) {

		if (defined $VRML_CONFIG{$_}) {
			if (!(-e $VRML_CONFIG{$_})) {
				print "WARNING: Check your specific vrml.conf file; can not find system executable ".
					$VRML_CONFIG{$_}." for identifier $_\n";
			}
			$val = $VRML_CONFIG{$_};
 		} else {
			# lets see if we can find it....
			$val = tryToFind($_);
	 	}
		print OUT "#define\t$_\t\t\"$val\"\n";
	}
}

sub tryToFind() {
	my ($tofind) = @_;
	my $val = "ISNOTDEFINED";
	my $try = "";
	
	if ("BROWSER" eq $tofind) {
		# more than 1 possibility - remove whitespace after each try
		$try = `which firefox`; $try =~ s/^\s+//; $try =~ s/\s+$//;
		if ("" eq $try) { $try = `which safari`; $try =~ s/^\s+//; $try =~ s/\s+$//; }
		if ("" eq $try) { $try = `which mozilla`; $try =~ s/^\s+//; $try =~ s/\s+$//; }
		if ("" eq $try) { $try = `which netscape`; $try =~ s/^\s+//; $try =~ s/\s+$//; }
		if ("" eq $try) { $try = `which opera`; $try =~ s/^\s+//; $try =~ s/\s+$//; }
		if ("" eq $try) { $try = `which firefox`; $try =~ s/^\s+//; $try =~ s/\s+$//; }
		if ("" eq $try) { $try = `which seamonkey`; $try =~ s/^\s+//; $try =~ s/\s+$//; }
	} elsif ("SOUNDCONV" eq $tofind) {
		$try = `which sox`; $try =~ s/^\s+//; $try =~ s/\s+$//;
	} elsif ("UNZIP" eq $tofind) {
		$try = `which gunzip`; $try =~ s/^\s+//; $try =~ s/\s+$//;
	} elsif ("WGET" eq $tofind) {
		# more than 1 possibility - remove whitespace after each try
		$try = `which wget`; $try =~ s/^\s+//; $try =~ s/\s+$//;
		if ("" eq $try) {$try = `which curl`; $try =~ s/^\s+//; $try =~ s/\s+$//;}
	} elsif ("CONVERT" eq $tofind) {
		$try = `which convert`; $try =~ s/^\s+//; $try =~ s/\s+$//;
	} elsif ("JAVA" eq $tofind) {
		$try = `which java`; $try =~ s/^\s+//; $try =~ s/\s+$//;
	}

	if ("" ne $try) {
		$val = $try; # found it, hopefully
	} else {
		print "\tWARNING: can not find  $tofind in the conf file, or on the system"; print ": returning: $val\n";		
	}

	return $val;
}
