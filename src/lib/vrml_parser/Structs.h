/*
  $Id: Structs.h,v 1.74 2010/02/17 14:31:08 crc_canada Exp $

  Structs.h: generated by VRMLC.pm. DO NOT MODIFY, MODIFY VRMLC.pm INSTEAD.

  Code here comes almost verbatim from VRMLC.pm

*/

/****************************************************************************
    This file is part of the FreeWRL/FreeX3D Distribution.

    Copyright 2009 CRC Canada. (http://www.crc.gc.ca)

    FreeWRL/FreeX3D is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FreeWRL/FreeX3D is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FreeWRL/FreeX3D.  If not, see <http://www.gnu.org/licenses/>.
****************************************************************************/



#ifndef __FREEWRL_STRUCTS_H__
#define __FREEWRL_STRUCTS_H__


struct point_XYZ {GLdouble x,y,z;};
struct orient_XYZA {GLdouble x,y,z,a;};

struct X3D_Virt {
	void (*prep)(void *);
	void (*rend)(void *);
	void (*children)(void *);
	void (*fin)(void *);
	void (*rendray)(void *);
	void (*mkpolyrep)(void *);
	void (*changed)(void *);
	void (*proximity)(void *);
	void (*collision)(void *);
	void (*compile)(void *, void *, void *, void *, void *);
	/* char *name; */
};

/* a string is stored as a pointer, and a length of that mallocd pointer */
struct Uni_String {
	int len;
	char * strptr;
	int touched;
};

/* Internal representation of IndexedFaceSet, Text, Extrusion & ElevationGrid:
 * set of triangles.
 * done so that we get rid of concave polygons etc.
 */
struct X3D_PolyRep { /* Currently a bit wasteful, because copying */
	int irep_change;
	int ccw;	/* ccw field for single faced structures */
	int ntri; /* number of triangles */
	int streamed;	/* is this done the streaming pass? */
	int alloc_tri; /* number of allocated triangles */
	int *cindex;   /* triples (per triangle) */
	float *actualCoord; /* triples (per point) */
	int *colindex;   /* triples (per triangle) */
	float *color; /* triples or null */
	int *norindex;
	float *normal; /* triples or null */
        int *tcindex; /* triples or null */
        float *GeneratedTexCoords;	/* triples (per triangle) of texture coords if there is no texCoord node */
	int tcoordtype; /* type of texture coord node - is this a NODE_TextureCoordGenerator... */
	GLfloat minVals[3];		/* for collision and default texture coord generation */
	GLfloat maxVals[3];		/* for collision and default texture coord generation */
	GLfloat transparency;		/* what the transparency value was during compile, put in color array if RGBA colors */
	int isRGBAcolorNode;		/* color was originally an RGBA, DO NOT re-write if transparency changes */
};

/* viewer dimentions (for collision detection) */
struct sNaviInfo {
        double width;
        double height;
        double step;
};

/* definitions to help scanning values in from a string */ 
#define SCANTONUMBER(value) while (isspace(*value) || (*value==',')) value++; 
#define SCANTOSTRING(value) while (isspace(*value) || (*value==',')) value++; 
#define OLDSCANTOSTRING(value) while ((*value==' ') || (*value==',')) value++; 
#define ISSTARTNUMBER(value) (isdigit(*value) \
		|| (*value == '+') || (*value == '-')) 
#define SCANPASTFLOATNUMBER(value) while (isdigit(*value) \
		|| (*value == '.') || \
		(*value == 'E') || (*value == 'e') || (*value == '+') || (*value == '-')) value++; 
#define SCANPASTINTNUMBER(value) if (isdigit(*value) || (*value == '-') || (*value == '+')) value++; \
		while (isdigit(*value) || \
		(*value == 'x') || (*value == 'X') ||\
		((*value >='a') && (*value <='f')) || \
		((*value >='A') && (*value <='F')) || \
		(*value == '-') || (*value == '+')) value++; 
/* Data type for index into ID-table. */
typedef size_t indexT;

#define NODE_Anchor	0
#define NODE_Appearance	1
#define NODE_Arc2D	2
#define NODE_ArcClose2D	3
#define NODE_AudioClip	4
#define NODE_AudioControl	5
#define NODE_Background	6
#define NODE_Billboard	7
#define NODE_BooleanFilter	8
#define NODE_BooleanSequencer	9
#define NODE_BooleanToggle	10
#define NODE_BooleanTrigger	11
#define NODE_Box	12
#define NODE_Circle2D	13
#define NODE_ClipPlane	14
#define NODE_Collision	15
#define NODE_Color	16
#define NODE_ColorInterpolator	17
#define NODE_ColorRGBA	18
#define NODE_ComposedCubeMapTexture	19
#define NODE_ComposedShader	20
#define NODE_Cone	21
#define NODE_Contour2D	22
#define NODE_ContourPolyLine2D	23
#define NODE_Coordinate	24
#define NODE_CoordinateInterpolator	25
#define NODE_CoordinateInterpolator2D	26
#define NODE_Cylinder	27
#define NODE_CylinderSensor	28
#define NODE_DirectionalLight	29
#define NODE_Disk2D	30
#define NODE_EaseInEaseOut	31
#define NODE_ElevationGrid	32
#define NODE_Extrusion	33
#define NODE_FillProperties	34
#define NODE_FloatVertexAttribute	35
#define NODE_Fog	36
#define NODE_FogCoordinate	37
#define NODE_FontStyle	38
#define NODE_GeneratedCubeMapTexture	39
#define NODE_GeoCoordinate	40
#define NODE_GeoElevationGrid	41
#define NODE_GeoLOD	42
#define NODE_GeoLocation	43
#define NODE_GeoMetadata	44
#define NODE_GeoOrigin	45
#define NODE_GeoPositionInterpolator	46
#define NODE_GeoProximitySensor	47
#define NODE_GeoTouchSensor	48
#define NODE_GeoTransform	49
#define NODE_GeoViewpoint	50
#define NODE_Group	51
#define NODE_HAnimDisplacer	52
#define NODE_HAnimHumanoid	53
#define NODE_HAnimJoint	54
#define NODE_HAnimSegment	55
#define NODE_HAnimSite	56
#define NODE_ImageCubeMapTexture	57
#define NODE_ImageTexture	58
#define NODE_IndexedFaceSet	59
#define NODE_IndexedLineSet	60
#define NODE_IndexedTriangleFanSet	61
#define NODE_IndexedTriangleSet	62
#define NODE_IndexedTriangleStripSet	63
#define NODE_Inline	64
#define NODE_IntegerSequencer	65
#define NODE_IntegerTrigger	66
#define NODE_KeySensor	67
#define NODE_LOD	68
#define NODE_LineProperties	69
#define NODE_LineSet	70
#define NODE_LoadSensor	71
#define NODE_LocalFog	72
#define NODE_Material	73
#define NODE_Matrix3VertexAttribute	74
#define NODE_Matrix4VertexAttribute	75
#define NODE_MetadataDouble	76
#define NODE_MetadataFloat	77
#define NODE_MetadataInteger	78
#define NODE_MetadataMFBool	79
#define NODE_MetadataMFColor	80
#define NODE_MetadataMFColorRGBA	81
#define NODE_MetadataMFDouble	82
#define NODE_MetadataMFFloat	83
#define NODE_MetadataMFInt32	84
#define NODE_MetadataMFMatrix3d	85
#define NODE_MetadataMFMatrix3f	86
#define NODE_MetadataMFMatrix4d	87
#define NODE_MetadataMFMatrix4f	88
#define NODE_MetadataMFNode	89
#define NODE_MetadataMFRotation	90
#define NODE_MetadataMFString	91
#define NODE_MetadataMFTime	92
#define NODE_MetadataMFVec2d	93
#define NODE_MetadataMFVec2f	94
#define NODE_MetadataMFVec3d	95
#define NODE_MetadataMFVec3f	96
#define NODE_MetadataMFVec4d	97
#define NODE_MetadataMFVec4f	98
#define NODE_MetadataSFBool	99
#define NODE_MetadataSFColor	100
#define NODE_MetadataSFColorRGBA	101
#define NODE_MetadataSFDouble	102
#define NODE_MetadataSFFloat	103
#define NODE_MetadataSFImage	104
#define NODE_MetadataSFInt32	105
#define NODE_MetadataSFMatrix3d	106
#define NODE_MetadataSFMatrix3f	107
#define NODE_MetadataSFMatrix4d	108
#define NODE_MetadataSFMatrix4f	109
#define NODE_MetadataSFNode	110
#define NODE_MetadataSFRotation	111
#define NODE_MetadataSFString	112
#define NODE_MetadataSFTime	113
#define NODE_MetadataSFVec2d	114
#define NODE_MetadataSFVec2f	115
#define NODE_MetadataSFVec3d	116
#define NODE_MetadataSFVec3f	117
#define NODE_MetadataSFVec4d	118
#define NODE_MetadataSFVec4f	119
#define NODE_MetadataSet	120
#define NODE_MetadataString	121
#define NODE_MidiControl	122
#define NODE_MovieTexture	123
#define NODE_MultiTexture	124
#define NODE_MultiTextureCoordinate	125
#define NODE_MultiTextureTransform	126
#define NODE_NavigationInfo	127
#define NODE_Normal	128
#define NODE_NormalInterpolator	129
#define NODE_NurbsCurve	130
#define NODE_NurbsCurve2D	131
#define NODE_NurbsGroup	132
#define NODE_NurbsPositionInterpolator	133
#define NODE_NurbsSurface	134
#define NODE_NurbsTextureSurface	135
#define NODE_NurbsTrimmedSurface	136
#define NODE_OrientationInterpolator	137
#define NODE_PackagedShader	138
#define NODE_PixelTexture	139
#define NODE_PlaneSensor	140
#define NODE_PointLight	141
#define NODE_PointSet	142
#define NODE_Polyline2D	143
#define NODE_Polypoint2D	144
#define NODE_PositionInterpolator	145
#define NODE_PositionInterpolator2D	146
#define NODE_ProgramShader	147
#define NODE_ProximitySensor	148
#define NODE_Rectangle2D	149
#define NODE_ScalarInterpolator	150
#define NODE_Script	151
#define NODE_ShaderPart	152
#define NODE_ShaderProgram	153
#define NODE_Shape	154
#define NODE_Sound	155
#define NODE_Sphere	156
#define NODE_SphereSensor	157
#define NODE_SplinePositionInterpolator	158
#define NODE_SplinePositionInterpolator2D	159
#define NODE_SplineScalarInterpolator	160
#define NODE_SpotLight	161
#define NODE_SquadOrientationInterpolator	162
#define NODE_StaticGroup	163
#define NODE_StringSensor	164
#define NODE_Switch	165
#define NODE_Text	166
#define NODE_TextureBackground	167
#define NODE_TextureCoordinate	168
#define NODE_TextureCoordinateGenerator	169
#define NODE_TextureProperties	170
#define NODE_TextureTransform	171
#define NODE_TimeSensor	172
#define NODE_TimeTrigger	173
#define NODE_TouchSensor	174
#define NODE_Transform	175
#define NODE_TriangleFanSet	176
#define NODE_TriangleSet	177
#define NODE_TriangleSet2D	178
#define NODE_TriangleStripSet	179
#define NODE_TwoSidedMaterial	180
#define NODE_VRML1_AsciiText	181
#define NODE_VRML1_Cone	182
#define NODE_VRML1_Coordinate3	183
#define NODE_VRML1_Cube	184
#define NODE_VRML1_Cylinder	185
#define NODE_VRML1_DirectionalLight	186
#define NODE_VRML1_FontStyle	187
#define NODE_VRML1_IndexedFaceSet	188
#define NODE_VRML1_IndexedLineSet	189
#define NODE_VRML1_Info	190
#define NODE_VRML1_LOD	191
#define NODE_VRML1_Material	192
#define NODE_VRML1_MaterialBinding	193
#define NODE_VRML1_MatrixTransform	194
#define NODE_VRML1_Normal	195
#define NODE_VRML1_NormalBinding	196
#define NODE_VRML1_OrthographicCamera	197
#define NODE_VRML1_PerspectiveCamera	198
#define NODE_VRML1_PointLight	199
#define NODE_VRML1_PointSet	200
#define NODE_VRML1_Rotation	201
#define NODE_VRML1_Scale	202
#define NODE_VRML1_Separator	203
#define NODE_VRML1_ShapeHints	204
#define NODE_VRML1_Sphere	205
#define NODE_VRML1_SpotLight	206
#define NODE_VRML1_Switch	207
#define NODE_VRML1_Texture2	208
#define NODE_VRML1_Texture2Transform	209
#define NODE_VRML1_TextureCoordinate2	210
#define NODE_VRML1_Transform	211
#define NODE_VRML1_Translation	212
#define NODE_VRML1_WWWAnchor	213
#define NODE_VRML1_WWWInline	214
#define NODE_Viewpoint	215
#define NODE_VisibilitySensor	216
#define NODE_WorldInfo	217


/* Table of built-in fieldIds */
extern const char *FIELDNAMES[];
extern const indexT FIELDNAMES_COUNT;
#define FIELDNAMES_wrapS	0
#define FIELDNAMES__Value	1
#define FIELDNAMES_integerKey	2
#define FIELDNAMES_activate	3
#define FIELDNAMES_rootNode	4
#define FIELDNAMES_whichChoice	5
#define FIELDNAMES_load	6
#define FIELDNAMES_textureCoordIndex	7
#define FIELDNAMES_isLoaded	8
#define FIELDNAMES_rotation	9
#define FIELDNAMES_scaleFactor	10
#define FIELDNAMES_toggle	11
#define FIELDNAMES_title	12
#define FIELDNAMES_geoGridOrigin	13
#define FIELDNAMES_volumeFloatVal	14
#define FIELDNAMES___child4Node	15
#define FIELDNAMES_stripCount	16
#define FIELDNAMES_groundColor	17
#define FIELDNAMES_previous	18
#define FIELDNAMES_direction	19
#define FIELDNAMES_maxPosition	20
#define FIELDNAMES_removeChildren	21
#define FIELDNAMES_skin	22
#define FIELDNAMES_speedFactor	23
#define FIELDNAMES___shaderObj	24
#define FIELDNAMES_vertices	25
#define FIELDNAMES_filename	26
#define FIELDNAMES_autoButtonPress	27
#define FIELDNAMES___children	28
#define FIELDNAMES___do_scale	29
#define FIELDNAMES_left	30
#define FIELDNAMES___sidepoints	31
#define FIELDNAMES_inputTrue	32
#define FIELDNAMES___localFileName	33
#define FIELDNAMES_backAmbientIntensity	34
#define FIELDNAMES_exitTime	35
#define FIELDNAMES_joints	36
#define FIELDNAMES__oldhitNormal	37
#define FIELDNAMES_deletionAllowed	38
#define FIELDNAMES_translation	39
#define FIELDNAMES___inRange	40
#define FIELDNAMES_child2Url	41
#define FIELDNAMES_limitOrientation	42
#define FIELDNAMES_skeleton	43
#define FIELDNAMES__oldhitPoint	44
#define FIELDNAMES_type	45
#define FIELDNAMES_creaseAngle	46
#define FIELDNAMES_triggerTime	47
#define FIELDNAMES_displacers	48
#define FIELDNAMES_isActive	49
#define FIELDNAMES___childloadstatus	50
#define FIELDNAMES_bboxCenter	51
#define FIELDNAMES_xDimension	52
#define FIELDNAMES_centerOfMass	53
#define FIELDNAMES_set_orientation	54
#define FIELDNAMES_set_position	55
#define FIELDNAMES_solid	56
#define FIELDNAMES_mode	57
#define FIELDNAMES___textureTableIndex	58
#define FIELDNAMES_map	59
#define FIELDNAMES_on	60
#define FIELDNAMES_leftUrl	61
#define FIELDNAMES___do_anything	62
#define FIELDNAMES_isOver	63
#define FIELDNAMES_shininess	64
#define FIELDNAMES_texturePriority	65
#define FIELDNAMES_description	66
#define FIELDNAMES__wrapT	67
#define FIELDNAMES_top	68
#define FIELDNAMES_dropOffRate	69
#define FIELDNAMES_outerRadius	70
#define FIELDNAMES_touchTime	71
#define FIELDNAMES_family	72
#define FIELDNAMES_width	73
#define FIELDNAMES_skinNormal	74
#define FIELDNAMES_source	75
#define FIELDNAMES___lastParent	76
#define FIELDNAMES_front	77
#define FIELDNAMES_leftToRight	78
#define FIELDNAMES___occludeCheckCount	79
#define FIELDNAMES_boundaryModeT	80
#define FIELDNAMES_summary	81
#define FIELDNAMES_info	82
#define FIELDNAMES__dlchange	83
#define FIELDNAMES_backSpecularColor	84
#define FIELDNAMES_ambientIntensity	85
#define FIELDNAMES_headlight	86
#define FIELDNAMES_highResolution	87
#define FIELDNAMES_cycleInterval	88
#define FIELDNAMES_mass	89
#define FIELDNAMES_pitch	90
#define FIELDNAMES_rotateYUp	91
#define FIELDNAMES_bottomTexture	92
#define FIELDNAMES___oldJump	93
#define FIELDNAMES_sites	94
#define FIELDNAMES__rotationAngle	95
#define FIELDNAMES___t2	96
#define FIELDNAMES_parameter	97
#define FIELDNAMES_borderWidth	98
#define FIELDNAMES_backTransparency	99
#define FIELDNAMES_generateMipMaps	100
#define FIELDNAMES_tessellation	101
#define FIELDNAMES_scale	102
#define FIELDNAMES_proxy	103
#define FIELDNAMES__coord	104
#define FIELDNAMES_translation_changed	105
#define FIELDNAMES_renderCulling	106
#define FIELDNAMES___numPoints	107
#define FIELDNAMES_ambientColor	108
#define FIELDNAMES__dcol	109
#define FIELDNAMES_maxFront	110
#define FIELDNAMES_rightTexture	111
#define FIELDNAMES_set_spine	112
#define FIELDNAMES___t1	113
#define FIELDNAMES___textureright	114
#define FIELDNAMES_rotation_changed	115
#define FIELDNAMES_skinCoordWeight	116
#define FIELDNAMES_plane	117
#define FIELDNAMES_radius	118
#define FIELDNAMES_controlPoint	119
#define FIELDNAMES_point	120
#define FIELDNAMES_normal	121
#define FIELDNAMES___leftTexture	122
#define FIELDNAMES__oldrotation	123
#define FIELDNAMES_loop	124
#define FIELDNAMES__wrapS	125
#define FIELDNAMES_actionKeyPress	126
#define FIELDNAMES_horizontal	127
#define FIELDNAMES__shin	128
#define FIELDNAMES_enabled	129
#define FIELDNAMES_fanCount	130
#define FIELDNAMES_triggerTrue	131
#define FIELDNAMES___child2Node	132
#define FIELDNAMES_shapeType	133
#define FIELDNAMES__parentResource	134
#define FIELDNAMES_avatarSize	135
#define FIELDNAMES_collide	136
#define FIELDNAMES_specularColor	137
#define FIELDNAMES_transitionTime	138
#define FIELDNAMES__oldintValue	139
#define FIELDNAMES_color	140
#define FIELDNAMES_deviceMinVal	141
#define FIELDNAMES_axisOfRotation	142
#define FIELDNAMES_backEmissiveColor	143
#define FIELDNAMES_repeatT	144
#define FIELDNAMES__npv	145
#define FIELDNAMES___visible	146
#define FIELDNAMES___movedPosition	147
#define FIELDNAMES_topToBottom	148
#define FIELDNAMES_viewpoints	149
#define FIELDNAMES_FreeWRL__protoDef	150
#define FIELDNAMES_length	151
#define FIELDNAMES_index	152
#define FIELDNAMES___oldFieldOfView	153
#define FIELDNAMES_intensity	154
#define FIELDNAMES_navType	155
#define FIELDNAMES_update	156
#define FIELDNAMES_heightAngle	157
#define FIELDNAMES___loading	158
#define FIELDNAMES_next	159
#define FIELDNAMES_volumeInt32Val	160
#define FIELDNAMES___level	161
#define FIELDNAMES_isPaused	162
#define FIELDNAMES_value	163
#define FIELDNAMES___child1Node	164
#define FIELDNAMES__color	165
#define FIELDNAMES___scriptObj	166
#define FIELDNAMES_keyRelease	167
#define FIELDNAMES___backTexture	168
#define FIELDNAMES_stopTime	169
#define FIELDNAMES__faceValue	170
#define FIELDNAMES_crossSection	171
#define FIELDNAMES_position	172
#define FIELDNAMES___solid	173
#define FIELDNAMES_xSpacing	174
#define FIELDNAMES___do_scaleO	175
#define FIELDNAMES_faceType	176
#define FIELDNAMES___transparency	177
#define FIELDNAMES_controller	178
#define FIELDNAMES__butPr	179
#define FIELDNAMES_scaleOrientation	180
#define FIELDNAMES___ctflag	181
#define FIELDNAMES_inputFalse	182
#define FIELDNAMES_bottomUrl	183
#define FIELDNAMES_hitPoint_changed	184
#define FIELDNAMES_boundaryModeS	185
#define FIELDNAMES__sortedChildren	186
#define FIELDNAMES_set_normalIndex	187
#define FIELDNAMES_knot	188
#define FIELDNAMES_justification	189
#define FIELDNAMES_fogType	190
#define FIELDNAMES_skyColor	191
#define FIELDNAMES_spacing	192
#define FIELDNAMES__oldtranslation	193
#define FIELDNAMES_displacements	194
#define FIELDNAMES_panInt32Val	195
#define FIELDNAMES_topUrl	196
#define FIELDNAMES___colours	197
#define FIELDNAMES___BGNumber	198
#define FIELDNAMES_geoSystem	199
#define FIELDNAMES___shaderIDS	200
#define FIELDNAMES_addChildren	201
#define FIELDNAMES_attenuation	202
#define FIELDNAMES___oldLen	203
#define FIELDNAMES_endAngle	204
#define FIELDNAMES___oldKeyPtr	205
#define FIELDNAMES_hitGeoCoord_changed	206
#define FIELDNAMES_focalDistance	207
#define FIELDNAMES_cycleTime	208
#define FIELDNAMES_deviceName	209
#define FIELDNAMES_boundaryModeR	210
#define FIELDNAMES___oldChildren	211
#define FIELDNAMES_intValue	212
#define FIELDNAMES_applied	213
#define FIELDNAMES_backTexture	214
#define FIELDNAMES_function	215
#define FIELDNAMES_setValue	216
#define FIELDNAMES_channel	217
#define FIELDNAMES_velocity	218
#define FIELDNAMES_hitTexCoord_changed	219
#define FIELDNAMES_alpha	220
#define FIELDNAMES_enteredText	221
#define FIELDNAMES__origNormalizedPoint	222
#define FIELDNAMES_repeatS	223
#define FIELDNAMES__origPoint	224
#define FIELDNAMES___do_trans	225
#define FIELDNAMES_backDiffuseColor	226
#define FIELDNAMES_bboxSize	227
#define FIELDNAMES_visibilityRange	228
#define FIELDNAMES_textBounds	229
#define FIELDNAMES_skinCoordIndex	230
#define FIELDNAMES__coordIndex	231
#define FIELDNAMES_priority	232
#define FIELDNAMES_linetype	233
#define FIELDNAMES__oldtrackPoint	234
#define FIELDNAMES_spatialize	235
#define FIELDNAMES_normalizeVelocity	236
#define FIELDNAMES_metadata	237
#define FIELDNAMES_geoOrigin	238
#define FIELDNAMES___do_center	239
#define FIELDNAMES_geoCoords	240
#define FIELDNAMES_location	241
#define FIELDNAMES_colorPerVertex	242
#define FIELDNAMES_origin	243
#define FIELDNAMES_jump	244
#define FIELDNAMES_directOutput	245
#define FIELDNAMES___oldgeoCoords	246
#define FIELDNAMES_timeOut	247
#define FIELDNAMES_hitNormal_changed	248
#define FIELDNAMES_skyAngle	249
#define FIELDNAMES_useIntValue	250
#define FIELDNAMES_closureType	251
#define FIELDNAMES___finishedloading	252
#define FIELDNAMES_enterTime	253
#define FIELDNAMES_center	254
#define FIELDNAMES___rooturlloadstatus	255
#define FIELDNAMES_altKey	256
#define FIELDNAMES_spine	257
#define FIELDNAMES_floatValue	258
#define FIELDNAMES_offset	259
#define FIELDNAMES___StartLoadTime	260
#define FIELDNAMES___points	261
#define FIELDNAMES_anisotropicDegree	262
#define FIELDNAMES_parts	263
#define FIELDNAMES_keyVelocity	264
#define FIELDNAMES___simpleDisk	265
#define FIELDNAMES_normalPerVertex	266
#define FIELDNAMES_topTexture	267
#define FIELDNAMES_position_changed	268
#define FIELDNAMES__initialized	269
#define FIELDNAMES___hit	270
#define FIELDNAMES_maxBack	271
#define FIELDNAMES_vector	272
#define FIELDNAMES_modifiedFraction_changed	273
#define FIELDNAMES__bus	274
#define FIELDNAMES_geoCoord_changed	275
#define FIELDNAMES_controllerType	276
#define FIELDNAMES_set_index	277
#define FIELDNAMES_stiffness	278
#define FIELDNAMES___segCount	279
#define FIELDNAMES_minificationFilter	280
#define FIELDNAMES_attrib	281
#define FIELDNAMES_child4Url	282
#define FIELDNAMES_rightUrl	283
#define FIELDNAMES_time	284
#define FIELDNAMES_fraction_changed	285
#define FIELDNAMES_segments	286
#define FIELDNAMES_texture	287
#define FIELDNAMES_speed	288
#define FIELDNAMES_programs	289
#define FIELDNAMES_fillProperties	290
#define FIELDNAMES_maxAngle	291
#define FIELDNAMES_controllerPresent	292
#define FIELDNAMES___movedValue	293
#define FIELDNAMES_version	294
#define FIELDNAMES___loadResource	295
#define FIELDNAMES_image	296
#define FIELDNAMES___botpoints	297
#define FIELDNAMES_set_crossSection	298
#define FIELDNAMES_levelChanged	299
#define FIELDNAMES_colorIndex	300
#define FIELDNAMES_duration_changed	301
#define FIELDNAMES_order	302
#define FIELDNAMES_geometry	303
#define FIELDNAMES_textureProperties	304
#define FIELDNAMES_watchList	305
#define FIELDNAMES__channel	306
#define FIELDNAMES_lineProperties	307
#define FIELDNAMES__controller	308
#define FIELDNAMES_data	309
#define FIELDNAMES_centerOfRotation	310
#define FIELDNAMES__scol	311
#define FIELDNAMES_minBack	312
#define FIELDNAMES___vertIndx	313
#define FIELDNAMES_backShininess	314
#define FIELDNAMES___movedCoords	315
#define FIELDNAMES___isX3D	316
#define FIELDNAMES___vertArr	317
#define FIELDNAMES_closed	318
#define FIELDNAMES_trackPoint_changed	319
#define FIELDNAMES_global	320
#define FIELDNAMES_vTessellation	321
#define FIELDNAMES_back	322
#define FIELDNAMES_tickTime	323
#define FIELDNAMES_minVal	324
#define FIELDNAMES___rightTexture	325
#define FIELDNAMES___compiledmode	326
#define FIELDNAMES_pressTime	327
#define FIELDNAMES_geoCenter	328
#define FIELDNAMES_emissiveColor	329
#define FIELDNAMES_filled	330
#define FIELDNAMES_groundAngle	331
#define FIELDNAMES_isValid	332
#define FIELDNAMES_children	333
#define FIELDNAMES_string	334
#define FIELDNAMES_isBound	335
#define FIELDNAMES_triggerValue	336
#define FIELDNAMES___compiledpoint	337
#define FIELDNAMES___bottomTexture	338
#define FIELDNAMES_controlKey	339
#define FIELDNAMES_textureCompression	340
#define FIELDNAMES_frontTexture	341
#define FIELDNAMES_centerOfRotation_changed	342
#define FIELDNAMES_diskAngle	343
#define FIELDNAMES___Samples	344
#define FIELDNAMES___do_rotation	345
#define FIELDNAMES_set_fraction	346
#define FIELDNAMES_transitionComplete	347
#define FIELDNAMES___inittime	348
#define FIELDNAMES_backUrl	349
#define FIELDNAMES_size	350
#define FIELDNAMES_maxExtent	351
#define FIELDNAMES_orientation_changed	352
#define FIELDNAMES___child3Node	353
#define FIELDNAMES_buttonPress	354
#define FIELDNAMES_materialIndex	355
#define FIELDNAMES_style	356
#define FIELDNAMES_bottom	357
#define FIELDNAMES_hatchColor	358
#define FIELDNAMES_justify	359
#define FIELDNAMES_side	360
#define FIELDNAMES_frontUrl	361
#define FIELDNAMES_dimension	362
#define FIELDNAMES__solid	363
#define FIELDNAMES_separateBackColor	364
#define FIELDNAMES___rootUrl	365
#define FIELDNAMES_maxVal	366
#define FIELDNAMES_bindTime	367
#define FIELDNAMES_depth	368
#define FIELDNAMES_set_boolean	369
#define FIELDNAMES_fieldOfView	370
#define FIELDNAMES___oldHeadlight	371
#define FIELDNAMES_set_height	372
#define FIELDNAMES_borderColor	373
#define FIELDNAMES_child1Url	374
#define FIELDNAMES_endCap	375
#define FIELDNAMES_set_colorIndex	376
#define FIELDNAMES_reference	377
#define FIELDNAMES_uTessellation	378
#define FIELDNAMES___normals	379
#define FIELDNAMES_set_triggerTime	380
#define FIELDNAMES__oldhitTexCoord	381
#define FIELDNAMES_value_changed	382
#define FIELDNAMES___oldKeyValuePtr	383
#define FIELDNAMES_keyValue	384
#define FIELDNAMES_bottomRadius	385
#define FIELDNAMES_mustEvaluate	386
#define FIELDNAMES_diffuseColor	387
#define FIELDNAMES_tessellationScale	388
#define FIELDNAMES_startIndex	389
#define FIELDNAMES__vertValue	390
#define FIELDNAMES___oldmetadata	391
#define FIELDNAMES_inputNegate	392
#define FIELDNAMES_keyWeight	393
#define FIELDNAMES_key	394
#define FIELDNAMES__ecol	395
#define FIELDNAMES__typeValue	396
#define FIELDNAMES_ulimit	397
#define FIELDNAMES___quadcount	398
#define FIELDNAMES_skinCoord	399
#define FIELDNAMES_yScale	400
#define FIELDNAMES___movedOrientation	401
#define FIELDNAMES___oldEnabled	402
#define FIELDNAMES_name	403
#define FIELDNAMES_texCoord	404
#define FIELDNAMES__ccw	405
#define FIELDNAMES_lineBounds	406
#define FIELDNAMES_hatched	407
#define FIELDNAMES_easeInEaseOut	408
#define FIELDNAMES__creaseAngle	409
#define FIELDNAMES_level_changed	410
#define FIELDNAMES___texCoords	411
#define FIELDNAMES_geovalue_changed	412
#define FIELDNAMES__texCoord	413
#define FIELDNAMES_texCoordIndex	414
#define FIELDNAMES_beginCap	415
#define FIELDNAMES_transparency	416
#define FIELDNAMES___vertexCount	417
#define FIELDNAMES_set_bind	418
#define FIELDNAMES_textureTransform	419
#define FIELDNAMES___sourceNumber	420
#define FIELDNAMES_progress	421
#define FIELDNAMES_height	422
#define FIELDNAMES_right	423
#define FIELDNAMES__deviceNameIndex	424
#define FIELDNAMES_panFloatVal	425
#define FIELDNAMES___localOrient	426
#define FIELDNAMES_startAngle	427
#define FIELDNAMES_minAngle	428
#define FIELDNAMES_weight	429
#define FIELDNAMES_visibilityLimit	430
#define FIELDNAMES__vel	431
#define FIELDNAMES__sentVel	432
#define FIELDNAMES___oldSize	433
#define FIELDNAMES_deltaInt32Val	434
#define FIELDNAMES__radius	435
#define FIELDNAMES_collideTime	436
#define FIELDNAMES___loadstatus	437
#define FIELDNAMES_magnificationFilter	438
#define FIELDNAMES_numComponents	439
#define FIELDNAMES_fogCoord	440
#define FIELDNAMES___oldGeoCenter	441
#define FIELDNAMES_choice	442
#define FIELDNAMES_hatchStyle	443
#define FIELDNAMES___params	444
#define FIELDNAMES_cutOffAngle	445
#define FIELDNAMES_minPosition	446
#define FIELDNAMES_linewidthScaleFactor	447
#define FIELDNAMES___geoSystem	448
#define FIELDNAMES_deltaFloatVal	449
#define FIELDNAMES_rootUrl	450
#define FIELDNAMES_finalText	451
#define FIELDNAMES_FreeWRL_PROTOInterfaceNodes	452
#define FIELDNAMES_url	453
#define FIELDNAMES_coord	454
#define FIELDNAMES_startTime	455
#define FIELDNAMES___frontTexture	456
#define FIELDNAMES___topTexture	457
#define FIELDNAMES_minFront	458
#define FIELDNAMES_ccw	459
#define FIELDNAMES_valueChanged	460
#define FIELDNAMES__controllerIndex	461
#define FIELDNAMES_level	462
#define FIELDNAMES_vertexCount	463
#define FIELDNAMES_transitionType	464
#define FIELDNAMES___rendersub	465
#define FIELDNAMES_llimit	466
#define FIELDNAMES_range	467
#define FIELDNAMES_keyPress	468
#define FIELDNAMES_resumeTime	469
#define FIELDNAMES_forceTransitions	470
#define FIELDNAMES_vertexOrdering	471
#define FIELDNAMES_shaders	472
#define FIELDNAMES_language	473
#define FIELDNAMES_shiftKey	474
#define FIELDNAMES__cpv	475
#define FIELDNAMES_VRML1children	476
#define FIELDNAMES_leftTexture	477
#define FIELDNAMES_momentsOfInertia	478
#define FIELDNAMES_lineSegments	479
#define FIELDNAMES_coordIndex	480
#define FIELDNAMES_material	481
#define FIELDNAMES__selected	482
#define FIELDNAMES_set_scale	483
#define FIELDNAMES_loadTime	484
#define FIELDNAMES__convex	485
#define FIELDNAMES_actionKeyRelease	486
#define FIELDNAMES___oldMFString	487
#define FIELDNAMES_isSelected	488
#define FIELDNAMES_pressLength	489
#define FIELDNAMES_deviceMaxVal	490
#define FIELDNAMES_child3Url	491
#define FIELDNAMES_pauseTime	492
#define FIELDNAMES__ILS	493
#define FIELDNAMES_normalIndex	494
#define FIELDNAMES_beamWidth	495
#define FIELDNAMES_zSpacing	496
#define FIELDNAMES___oldSFString	497
#define FIELDNAMES_innerRadius	498
#define FIELDNAMES_fontStyle	499
#define FIELDNAMES_convex	500
#define FIELDNAMES_orientation	501
#define FIELDNAMES_set_texCoordIndex	502
#define FIELDNAMES_whichChild	503
#define FIELDNAMES_autoOffset	504
#define FIELDNAMES_appearance	505
#define FIELDNAMES_wrapT	506
#define FIELDNAMES_zDimension	507
#define FIELDNAMES_maxDelta	508
#define FIELDNAMES__intControllerType	509
#define FIELDNAMES_set_coordIndex	510
#define FIELDNAMES__normal	511
#define FIELDNAMES_elapsedTime	512
#define FIELDNAMES_numPoints	513
#define FIELDNAMES___vertices	514
#define FIELDNAMES___initialized	515
#define FIELDNAMES__amb	516

const char *stringFieldType(indexT st);

/* Table of built-in fieldIds */
extern const char *EVENT_OUT[];
extern const indexT EVENT_OUT_COUNT;
#define EVENT_OUT_inputNegate	0
#define EVENT_OUT_panInt32Val	1
#define EVENT_OUT_isValid	2
#define EVENT_OUT_position_changed	3
#define EVENT_OUT_deltaFloatVal	4
#define EVENT_OUT_finalText	5
#define EVENT_OUT_isBound	6
#define EVENT_OUT_triggerValue	7
#define EVENT_OUT_controlKey	8
#define EVENT_OUT_actionKeyPress	9
#define EVENT_OUT_centerOfRotation_changed	10
#define EVENT_OUT_isLoaded	11
#define EVENT_OUT_modifiedFraction_changed	12
#define EVENT_OUT_isOver	13
#define EVENT_OUT_hitGeoCoord_changed	14
#define EVENT_OUT_geoCoord_changed	15
#define EVENT_OUT_cycleTime	16
#define EVENT_OUT_valueChanged	17
#define EVENT_OUT_transitionComplete	18
#define EVENT_OUT_toggle	19
#define EVENT_OUT_lineBounds	20
#define EVENT_OUT_triggerTrue	21
#define EVENT_OUT_touchTime	22
#define EVENT_OUT_volumeFloatVal	23
#define EVENT_OUT_time	24
#define EVENT_OUT_keyPress	25
#define EVENT_OUT_fraction_changed	26
#define EVENT_OUT_level_changed	27
#define EVENT_OUT_hitTexCoord_changed	28
#define EVENT_OUT_orientation_changed	29
#define EVENT_OUT_enteredText	30
#define EVENT_OUT_geovalue_changed	31
#define EVENT_OUT_progress	32
#define EVENT_OUT_shiftKey	33
#define EVENT_OUT_textBounds	34
#define EVENT_OUT_panFloatVal	35
#define EVENT_OUT_inputTrue	36
#define EVENT_OUT_loadTime	37
#define EVENT_OUT_volumeInt32Val	38
#define EVENT_OUT_actionKeyRelease	39
#define EVENT_OUT_levelChanged	40
#define EVENT_OUT_isSelected	41
#define EVENT_OUT_exitTime	42
#define EVENT_OUT_duration_changed	43
#define EVENT_OUT_isPaused	44
#define EVENT_OUT_origin	45
#define EVENT_OUT_bindTime	46
#define EVENT_OUT_keyRelease	47
#define EVENT_OUT_hitNormal_changed	48
#define EVENT_OUT_deltaInt32Val	49
#define EVENT_OUT_collideTime	50
#define EVENT_OUT_translation_changed	51
#define EVENT_OUT_enterTime	52
#define EVENT_OUT_altKey	53
#define EVENT_OUT_rotation_changed	54
#define EVENT_OUT_triggerTime	55
#define EVENT_OUT_inputFalse	56
#define EVENT_OUT_value_changed	57
#define EVENT_OUT_trackPoint_changed	58
#define EVENT_OUT_isActive	59
#define EVENT_OUT_hitPoint_changed	60
#define EVENT_OUT_elapsedTime	61


/* Table of built-in fieldIds */
extern const char *EVENT_IN[];
extern const indexT EVENT_IN_COUNT;
#define EVENT_IN_set_position	0
#define EVENT_IN_next	1
#define EVENT_IN_set_scale	2
#define EVENT_IN_setValue	3
#define EVENT_IN_set_texCoordIndex	4
#define EVENT_IN_set_height	5
#define EVENT_IN_activate	6
#define EVENT_IN_addChildren	7
#define EVENT_IN_set_colorIndex	8
#define EVENT_IN_set_crossSection	9
#define EVENT_IN_previous	10
#define EVENT_IN_set_spine	11
#define EVENT_IN_set_triggerTime	12
#define EVENT_IN_removeChildren	13
#define EVENT_IN_set_coordIndex	14
#define EVENT_IN_set_bind	15
#define EVENT_IN_tickTime	16
#define EVENT_IN_set_index	17
#define EVENT_IN_set_normalIndex	18
#define EVENT_IN_set_fraction	19
#define EVENT_IN_set_boolean	20
#define EVENT_IN_coordIndex	21
#define EVENT_IN_set_orientation	22


/* Table of built-in fieldIds */
extern const char *EXPOSED_FIELD[];
extern const indexT EXPOSED_FIELD_COUNT;
#define EXPOSED_FIELD_wrapS	0
#define EXPOSED_FIELD_topTexture	1
#define EXPOSED_FIELD_integerKey	2
#define EXPOSED_FIELD_whichChoice	3
#define EXPOSED_FIELD_textureCoordIndex	4
#define EXPOSED_FIELD_vector	5
#define EXPOSED_FIELD_maxBack	6
#define EXPOSED_FIELD_rotation	7
#define EXPOSED_FIELD_scaleFactor	8
#define EXPOSED_FIELD_controllerType	9
#define EXPOSED_FIELD_stiffness	10
#define EXPOSED_FIELD_minificationFilter	11
#define EXPOSED_FIELD_attrib	12
#define EXPOSED_FIELD_rightUrl	13
#define EXPOSED_FIELD_segments	14
#define EXPOSED_FIELD_texture	15
#define EXPOSED_FIELD_groundColor	16
#define EXPOSED_FIELD_direction	17
#define EXPOSED_FIELD_programs	18
#define EXPOSED_FIELD_maxPosition	19
#define EXPOSED_FIELD_speed	20
#define EXPOSED_FIELD_fillProperties	21
#define EXPOSED_FIELD_controllerPresent	22
#define EXPOSED_FIELD_skin	23
#define EXPOSED_FIELD_maxAngle	24
#define EXPOSED_FIELD_version	25
#define EXPOSED_FIELD_image	26
#define EXPOSED_FIELD_vertices	27
#define EXPOSED_FIELD_filename	28
#define EXPOSED_FIELD_autoButtonPress	29
#define EXPOSED_FIELD_left	30
#define EXPOSED_FIELD_backAmbientIntensity	31
#define EXPOSED_FIELD_joints	32
#define EXPOSED_FIELD_order	33
#define EXPOSED_FIELD_deletionAllowed	34
#define EXPOSED_FIELD_geometry	35
#define EXPOSED_FIELD_translation	36
#define EXPOSED_FIELD_watchList	37
#define EXPOSED_FIELD_limitOrientation	38
#define EXPOSED_FIELD_skeleton	39
#define EXPOSED_FIELD_lineProperties	40
#define EXPOSED_FIELD_data	41
#define EXPOSED_FIELD_centerOfRotation	42
#define EXPOSED_FIELD_minBack	43
#define EXPOSED_FIELD_type	44
#define EXPOSED_FIELD_backShininess	45
#define EXPOSED_FIELD_closed	46
#define EXPOSED_FIELD_global	47
#define EXPOSED_FIELD_vTessellation	48
#define EXPOSED_FIELD_displacers	49
#define EXPOSED_FIELD_minVal	50
#define EXPOSED_FIELD_back	51
#define EXPOSED_FIELD_pressTime	52
#define EXPOSED_FIELD_bboxCenter	53
#define EXPOSED_FIELD_emissiveColor	54
#define EXPOSED_FIELD_geoCenter	55
#define EXPOSED_FIELD_centerOfMass	56
#define EXPOSED_FIELD_filled	57
#define EXPOSED_FIELD_groundAngle	58
#define EXPOSED_FIELD_mode	59
#define EXPOSED_FIELD_string	60
#define EXPOSED_FIELD_children	61
#define EXPOSED_FIELD_map	62
#define EXPOSED_FIELD_on	63
#define EXPOSED_FIELD_leftUrl	64
#define EXPOSED_FIELD_textureCompression	65
#define EXPOSED_FIELD_frontTexture	66
#define EXPOSED_FIELD_diskAngle	67
#define EXPOSED_FIELD_shininess	68
#define EXPOSED_FIELD_texturePriority	69
#define EXPOSED_FIELD_description	70
#define EXPOSED_FIELD_top	71
#define EXPOSED_FIELD_dropOffRate	72
#define EXPOSED_FIELD_family	73
#define EXPOSED_FIELD_width	74
#define EXPOSED_FIELD_skinNormal	75
#define EXPOSED_FIELD_source	76
#define EXPOSED_FIELD_front	77
#define EXPOSED_FIELD_backUrl	78
#define EXPOSED_FIELD_size	79
#define EXPOSED_FIELD_boundaryModeT	80
#define EXPOSED_FIELD_maxExtent	81
#define EXPOSED_FIELD_summary	82
#define EXPOSED_FIELD_buttonPress	83
#define EXPOSED_FIELD_materialIndex	84
#define EXPOSED_FIELD_style	85
#define EXPOSED_FIELD_bottom	86
#define EXPOSED_FIELD_hatchColor	87
#define EXPOSED_FIELD_backSpecularColor	88
#define EXPOSED_FIELD_ambientIntensity	89
#define EXPOSED_FIELD_frontUrl	90
#define EXPOSED_FIELD_headlight	91
#define EXPOSED_FIELD_highResolution	92
#define EXPOSED_FIELD_cycleInterval	93
#define EXPOSED_FIELD_dimension	94
#define EXPOSED_FIELD_mass	95
#define EXPOSED_FIELD_pitch	96
#define EXPOSED_FIELD_bottomTexture	97
#define EXPOSED_FIELD_separateBackColor	98
#define EXPOSED_FIELD_sites	99
#define EXPOSED_FIELD_maxVal	100
#define EXPOSED_FIELD_depth	101
#define EXPOSED_FIELD_parameter	102
#define EXPOSED_FIELD_borderWidth	103
#define EXPOSED_FIELD_backTransparency	104
#define EXPOSED_FIELD_tessellation	105
#define EXPOSED_FIELD_fieldOfView	106
#define EXPOSED_FIELD_scale	107
#define EXPOSED_FIELD_renderCulling	108
#define EXPOSED_FIELD_borderColor	109
#define EXPOSED_FIELD_ambientColor	110
#define EXPOSED_FIELD_maxFront	111
#define EXPOSED_FIELD_rightTexture	112
#define EXPOSED_FIELD_uTessellation	113
#define EXPOSED_FIELD_skinCoordWeight	114
#define EXPOSED_FIELD_plane	115
#define EXPOSED_FIELD_keyValue	116
#define EXPOSED_FIELD_radius	117
#define EXPOSED_FIELD_bottomRadius	118
#define EXPOSED_FIELD_controlPoint	119
#define EXPOSED_FIELD_tessellationScale	120
#define EXPOSED_FIELD_diffuseColor	121
#define EXPOSED_FIELD_startIndex	122
#define EXPOSED_FIELD_point	123
#define EXPOSED_FIELD_normal	124
#define EXPOSED_FIELD_keyWeight	125
#define EXPOSED_FIELD_loop	126
#define EXPOSED_FIELD_key	127
#define EXPOSED_FIELD_ulimit	128
#define EXPOSED_FIELD_skinCoord	129
#define EXPOSED_FIELD_enabled	130
#define EXPOSED_FIELD_name	131
#define EXPOSED_FIELD_texCoord	132
#define EXPOSED_FIELD_hatched	133
#define EXPOSED_FIELD_shapeType	134
#define EXPOSED_FIELD_collide	135
#define EXPOSED_FIELD_avatarSize	136
#define EXPOSED_FIELD_specularColor	137
#define EXPOSED_FIELD_easeInEaseOut	138
#define EXPOSED_FIELD_transitionTime	139
#define EXPOSED_FIELD_color	140
#define EXPOSED_FIELD_axisOfRotation	141
#define EXPOSED_FIELD_backEmissiveColor	142
#define EXPOSED_FIELD_transparency	143
#define EXPOSED_FIELD_textureTransform	144
#define EXPOSED_FIELD_viewpoints	145
#define EXPOSED_FIELD_height	146
#define EXPOSED_FIELD_right	147
#define EXPOSED_FIELD_index	148
#define EXPOSED_FIELD_length	149
#define EXPOSED_FIELD_intensity	150
#define EXPOSED_FIELD_update	151
#define EXPOSED_FIELD_navType	152
#define EXPOSED_FIELD_heightAngle	153
#define EXPOSED_FIELD_minAngle	154
#define EXPOSED_FIELD_weight	155
#define EXPOSED_FIELD_visibilityLimit	156
#define EXPOSED_FIELD_value	157
#define EXPOSED_FIELD_stopTime	158
#define EXPOSED_FIELD_position	159
#define EXPOSED_FIELD_faceType	160
#define EXPOSED_FIELD_magnificationFilter	161
#define EXPOSED_FIELD_controller	162
#define EXPOSED_FIELD_fogCoord	163
#define EXPOSED_FIELD_scaleOrientation	164
#define EXPOSED_FIELD_choice	165
#define EXPOSED_FIELD_bottomUrl	166
#define EXPOSED_FIELD_hatchStyle	167
#define EXPOSED_FIELD_boundaryModeS	168
#define EXPOSED_FIELD_cutOffAngle	169
#define EXPOSED_FIELD_justification	170
#define EXPOSED_FIELD_fogType	171
#define EXPOSED_FIELD_skyColor	172
#define EXPOSED_FIELD_spacing	173
#define EXPOSED_FIELD_displacements	174
#define EXPOSED_FIELD_minPosition	175
#define EXPOSED_FIELD_topUrl	176
#define EXPOSED_FIELD_linewidthScaleFactor	177
#define EXPOSED_FIELD_FreeWRL_PROTOInterfaceNodes	178
#define EXPOSED_FIELD_attenuation	179
#define EXPOSED_FIELD_url	180
#define EXPOSED_FIELD_coord	181
#define EXPOSED_FIELD_startTime	182
#define EXPOSED_FIELD_minFront	183
#define EXPOSED_FIELD_focalDistance	184
#define EXPOSED_FIELD_deviceName	185
#define EXPOSED_FIELD_boundaryModeR	186
#define EXPOSED_FIELD_level	187
#define EXPOSED_FIELD_intValue	188
#define EXPOSED_FIELD_vertexCount	189
#define EXPOSED_FIELD_transitionType	190
#define EXPOSED_FIELD_applied	191
#define EXPOSED_FIELD_backTexture	192
#define EXPOSED_FIELD_llimit	193
#define EXPOSED_FIELD_function	194
#define EXPOSED_FIELD_range	195
#define EXPOSED_FIELD_channel	196
#define EXPOSED_FIELD_resumeTime	197
#define EXPOSED_FIELD_velocity	198
#define EXPOSED_FIELD_alpha	199
#define EXPOSED_FIELD_vertexOrdering	200
#define EXPOSED_FIELD_bboxSize	201
#define EXPOSED_FIELD_backDiffuseColor	202
#define EXPOSED_FIELD_shaders	203
#define EXPOSED_FIELD_VRML1children	204
#define EXPOSED_FIELD_visibilityRange	205
#define EXPOSED_FIELD_leftTexture	206
#define EXPOSED_FIELD_momentsOfInertia	207
#define EXPOSED_FIELD_coordIndex	208
#define EXPOSED_FIELD_skinCoordIndex	209
#define EXPOSED_FIELD_material	210
#define EXPOSED_FIELD_priority	211
#define EXPOSED_FIELD_linetype	212
#define EXPOSED_FIELD_pressLength	213
#define EXPOSED_FIELD_pauseTime	214
#define EXPOSED_FIELD_metadata	215
#define EXPOSED_FIELD_normalizeVelocity	216
#define EXPOSED_FIELD_geoCoords	217
#define EXPOSED_FIELD_normalIndex	218
#define EXPOSED_FIELD_location	219
#define EXPOSED_FIELD_beamWidth	220
#define EXPOSED_FIELD_jump	221
#define EXPOSED_FIELD_timeOut	222
#define EXPOSED_FIELD_skyAngle	223
#define EXPOSED_FIELD_useIntValue	224
#define EXPOSED_FIELD_fontStyle	225
#define EXPOSED_FIELD_orientation	226
#define EXPOSED_FIELD_whichChild	227
#define EXPOSED_FIELD_center	228
#define EXPOSED_FIELD_autoOffset	229
#define EXPOSED_FIELD_appearance	230
#define EXPOSED_FIELD_wrapT	231
#define EXPOSED_FIELD_maxDelta	232
#define EXPOSED_FIELD_floatValue	233
#define EXPOSED_FIELD_offset	234
#define EXPOSED_FIELD_numPoints	235
#define EXPOSED_FIELD_anisotropicDegree	236
#define EXPOSED_FIELD_parts	237
#define EXPOSED_FIELD_keyVelocity	238


/* Table of built-in fieldIds */
extern const char *FIELD[];
extern const indexT FIELD_COUNT;
#define FIELD_rootNode	0
#define FIELD_load	1
#define FIELD_horizontal	2
#define FIELD_yScale	3
#define FIELD_fanCount	4
#define FIELD_title	5
#define FIELD_child4Url	6
#define FIELD_geoGridOrigin	7
#define FIELD_stripCount	8
#define FIELD_deviceMinVal	9
#define FIELD_repeatT	10
#define FIELD_texCoordIndex	11
#define FIELD_beginCap	12
#define FIELD_speedFactor	13
#define FIELD_topToBottom	14
#define FIELD_FreeWRL__protoDef	15
#define FIELD_height	16
#define FIELD_colorIndex	17
#define FIELD_startAngle	18
#define FIELD_textureProperties	19
#define FIELD_child2Url	20
#define FIELD_crossSection	21
#define FIELD_xSpacing	22
#define FIELD_numComponents	23
#define FIELD_creaseAngle	24
#define FIELD_knot	25
#define FIELD_bboxCenter	26
#define FIELD_xDimension	27
#define FIELD_spacing	28
#define FIELD_solid	29
#define FIELD_geoSystem	30
#define FIELD_rootUrl	31
#define FIELD_endAngle	32
#define FIELD_ccw	33
#define FIELD_outerRadius	34
#define FIELD_family	35
#define FIELD_leftToRight	36
#define FIELD_range	37
#define FIELD_repeatS	38
#define FIELD_forceTransitions	39
#define FIELD_bboxSize	40
#define FIELD_info	41
#define FIELD_language	42
#define FIELD_style	43
#define FIELD_lineSegments	44
#define FIELD_justify	45
#define FIELD_side	46
#define FIELD_coordIndex	47
#define FIELD_deviceMaxVal	48
#define FIELD_child3Url	49
#define FIELD_spatialize	50
#define FIELD_geoOrigin	51
#define FIELD_rotateYUp	52
#define FIELD_normalIndex	53
#define FIELD_colorPerVertex	54
#define FIELD_zSpacing	55
#define FIELD_directOutput	56
#define FIELD_generateMipMaps	57
#define FIELD_innerRadius	58
#define FIELD_proxy	59
#define FIELD_closureType	60
#define FIELD_convex	61
#define FIELD_child1Url	62
#define FIELD_endCap	63
#define FIELD_zDimension	64
#define FIELD_reference	65
#define FIELD_spine	66
#define FIELD_bottomRadius	67
#define FIELD_mustEvaluate	68
#define FIELD_normalPerVertex	69


/* Table of built-in keywords */
extern const char *KEYWORDS[];
extern const indexT KEYWORDS_COUNT;
#define KW_eventOut	0
#define KW_TRUE	1
#define KW_NULL	2
#define KW_IS	3
#define KW_EXTERNPROTO	4
#define KW_inputOnly	5
#define KW_DEF	6
#define KW_PROTO	7
#define KW_IMPORT	8
#define KW_initializeOnly	9
#define KW_outputOnly	10
#define KW_FALSE	11
#define KW_inputOutput	12
#define KW_field	13
#define KW_TO	14
#define KW_PROFILE	15
#define KW_exposedField	16
#define KW_COMPONENT	17
#define KW_eventIn	18
#define KW_META	19
#define KW_EXPORT	20
#define KW_USE	21
#define KW_ROUTE	22

const char *stringKeywordType(indexT st);

/* Table of built-in profiles */
extern const char *PROFILES[];
extern const indexT PROFILES_COUNT;
#define PRO_Interchange	0
#define PRO_CADInterchange	1
#define PRO_MPEG4	2
#define PRO_Interactive	3
#define PRO_Full	4
#define PRO_Immersive	5
#define PRO_Core	6

const char *stringProfileType(indexT st);

/* Table of built-in components */
extern const char *COMPONENTS[];
extern const indexT COMPONENTS_COUNT;
#define COM_Geometry2D	0
#define COM_Rendering	1
#define COM_PickingSensor	2
#define COM_DIS	3
#define COM_EnvironmentalSensor	4
#define COM_Text	5
#define COM_NURBS	6
#define COM_CubeMapTexturing	7
#define COM_EventUtilities	8
#define COM_Interpolation	9
#define COM_Shaders	10
#define COM_Navigation	11
#define COM_Grouping	12
#define COM_Texturing	13
#define COM_Geospatial	14
#define COM_CADGeometry	15
#define COM_EnvironmentalEffects	16
#define COM_Shape	17
#define COM_Texturing3D	18
#define COM_PointDeviceSensor	19
#define COM_HAnim	20
#define COM_RigidBodyPhysics	21
#define COM_Core	22
#define COM_Layout	23
#define COM_Time	24
#define COM_Geometry3D	25
#define COM_Followers	26
#define COM_Scripting	27
#define COM_Lighting	28
#define COM_KeyDeviceSensor	29
#define COM_Layering	30
#define COM_Networking	31
#define COM_ParticleSystems	32
#define COM_Sound	33

const char *stringComponentType(indexT st);

/* Table of built-in PROTO keywords */
extern const char *PROTOKEYWORDS[];
extern const indexT PROTOKEYWORDS_COUNT;
#define PKW_eventOut	0
#define PKW_exposedField	1
#define PKW_inputOnly	2
#define PKW_eventIn	3
#define PKW_outputOnly	4
#define PKW_initializeOnly	5
#define PKW_inputOutput	6
#define PKW_field	7

const char *stringPROTOKeywordType(indexT st);

/* Table of built-in X3DSPECIAL keywords */
extern const char *X3DSPECIAL[];
extern const indexT X3DSPECIAL_COUNT;
#define X3DSP_IS	0
#define X3DSP_Scene	1
#define X3DSP_meta	2
#define X3DSP_export	3
#define X3DSP_ProtoDeclare	4
#define X3DSP_field	5
#define X3DSP_connect	6
#define X3DSP_head	7
#define X3DSP_ProtoInterface	8
#define X3DSP_ProtoInstance	9
#define X3DSP_ProtoBody	10
#define X3DSP_X3D	11
#define X3DSP_import	12
#define X3DSP_component	13
#define X3DSP_ExternProtoDeclare	14
#define X3DSP_fieldValue	15
#define X3DSP_ROUTE	16
#define X3DSP_Header	17

const char *stringX3DSPECIALType(indexT st);

/* Table of built-in TEXTUREBOUNDARY keywords */
extern const char *TEXTUREBOUNDARYKEYWORDS[];
extern const indexT TEXTUREBOUNDARYKEYWORDS_COUNT;
#define TB_CLAMP_TO_BOUNDARY	0
#define TB_REPEAT	1
#define TB_MIRRORED_REPEAT	2
#define TB_CLAMP	3
#define TB_CLAMP_TO_EDGE	4

const char *stringTEXTUREBOUNDARYKeywordType(indexT st);

/* Table of built-in TEXTUREMAGNIFICATION keywords */
extern const char *TEXTUREMAGNIFICATIONKEYWORDS[];
extern const indexT TEXTUREMAGNIFICATIONKEYWORDS_COUNT;
#define TMAG_NICEST	0
#define TMAG_NEAREST_PIXEL	1
#define TMAG_FASTEST	2
#define TMAG_DEFAULT	3
#define TMAG_AVG_PIXEL	4

const char *stringTEXTUREMAGNIFICATIONKeywordType(indexT st);

/* Table of built-in TEXTUREMINIFICATION keywords */
extern const char *TEXTUREMINIFICATIONKEYWORDS[];
extern const indexT TEXTUREMINIFICATIONKEYWORDS_COUNT;
#define TMIN_NEAREST_PIXEL_AVG_MIPMAP	0
#define TMIN_DEFAULT	1
#define TMIN_NEAREST_PIXEL	2
#define TMIN_NICEST	3
#define TMIN_AVG_PIXEL_AVG_MIPMAP	4
#define TMIN_FASTEST	5
#define TMIN_AVG_PIXEL	6
#define TMIN_AVG_PIXEL_NEAREST_MIPMAP	7
#define TMIN_NEAREST_PIXEL_NEAREST_MIPMAP	8

const char *stringTEXTUREMINIFICATIONKeywordType(indexT st);

/* Table of built-in TEXTURECOMPRESSION keywords */
extern const char *TEXTURECOMPRESSIONKEYWORDS[];
extern const indexT TEXTURECOMPRESSIONKEYWORDS_COUNT;
#define TC_NICEST	0
#define TC_LOW	1
#define TC_FASTEST	2
#define TC_DEFAULT	3
#define TC_HIGH	4
#define TC_MEDIUM	5

const char *stringTEXTURECOMPRESSIONKeywordType(indexT st);

/* Table of built-in VRML1Modifier keywords */
extern const char *VRML1Modifier[];
extern const indexT VRML1Modifier_COUNT;
#define VRML1MOD_REPEAT	0
#define VRML1MOD_ITALIC	1
#define VRML1MOD_PER_PART_INDEXED	2
#define VRML1MOD_PER_VERTEX_INDEXED	3
#define VRML1MOD_AUTO	4
#define VRML1MOD_TYPEWRITER	5
#define VRML1MOD_OVERALL	6
#define VRML1MOD_UNKNOWN_SHAPE_TYPE	7
#define VRML1MOD_SERIF	8
#define VRML1MOD_COUNTERCLOCKWISE	9
#define VRML1MOD_CLOCKWISE	10
#define VRML1MOD_POINT	11
#define VRML1MOD_PER_PART	12
#define VRML1MOD_SOLID	13
#define VRML1MOD_ALL	14
#define VRML1MOD_TOP	15
#define VRML1MOD_RIGHT	16
#define VRML1MOD_SIDES	17
#define VRML1MOD_BOLD	18
#define VRML1MOD_BOTTOM	19
#define VRML1MOD_LEFT	20
#define VRML1MOD_CONVEX	21
#define VRML1MOD_UNKNOWN_FACE_TYPE	22
#define VRML1MOD_SANS	23
#define VRML1MOD_UNKNOWN_ORDERING	24
#define VRML1MOD_PER_FACE	25
#define VRML1MOD_PER_VERTEX	26
#define VRML1MOD_NONE	27
#define VRML1MOD_PER_FACE_INDEXED	28
#define VRML1MOD_DEFAULT	29
#define VRML1MOD_ON	30
#define VRML1MOD_CLAMP	31
#define VRML1MOD_CENTER	32
#define VRML1MOD_OFF	33

const char *stringVRML1ModifierType(indexT st);

/* Table of built-in GEOSPATIAL keywords */
extern const char *GEOSPATIAL[];
extern const indexT GEOSPATIAL_COUNT;
#define GEOSP_CC	0
#define GEOSP_WE	1
#define GEOSP_GCC	2
#define GEOSP_date	3
#define GEOSP_copyright	4
#define GEOSP_FA	5
#define GEOSP_EC	6
#define GEOSP_UTM	7
#define GEOSP_BN	8
#define GEOSP_ED	9
#define GEOSP_CD	10
#define GEOSP_EF	11
#define GEOSP_GD	12
#define GEOSP_dataFormat	13
#define GEOSP_extent	14
#define GEOSP_metadataFormat	15
#define GEOSP_originator	16
#define GEOSP_dataUrl	17
#define GEOSP_verticalDatum	18
#define GEOSP_description	19
#define GEOSP_WD	20
#define GEOSP_resolution	21
#define GEOSP_coordinateSystem	22
#define GEOSP_RF	23
#define GEOSP_title	24
#define GEOSP_WGS84	25
#define GEOSP_ID	26
#define GEOSP_EB	27
#define GEOSP_HO	28
#define GEOSP_horizontalDatum	29
#define GEOSP_HE	30
#define GEOSP_EE	31
#define GEOSP_AA	32
#define GEOSP_SA	33
#define GEOSP_GC	34
#define GEOSP_AM	35
#define GEOSP_ellipsoid	36
#define GEOSP_IN	37
#define GEOSP_AN	38
#define GEOSP_KA	39
#define GEOSP_GDC	40
#define GEOSP_BR	41
#define GEOSP_EA	42

const char *stringGEOSPATIALType(indexT st);

/* Table of built-in VRML1_ keywords */
extern const char *VRML1_[];
extern const indexT VRML1__COUNT;
#define VRML1_VRML1_Rotation	0
#define VRML1_VRML1_Cone	1
#define VRML1_VRML1_PerspectiveCamera	2
#define VRML1_VRML1_ShapeHints	3
#define VRML1_VRML1_LOD	4
#define VRML1_VRML1_Translation	5
#define VRML1_VRML1_MatrixTransform	6
#define VRML1_VRML1_SpotLight	7
#define VRML1_VRML1_Texture2	8
#define VRML1_VRML1_IndexedLineSet	9
#define VRML1_VRML1_OrthographicCamera	10
#define VRML1_VRML1_Switch	11
#define VRML1_VRML1_Scale	12
#define VRML1_VRML1_Cube	13
#define VRML1_VRML1_Separator	14
#define VRML1_VRML1_PointSet	15
#define VRML1_VRML1_FontStyle	16
#define VRML1_VRML1_WWWInline	17
#define VRML1_VRML1_TextureCoordinate2	18
#define VRML1_VRML1_Info	19
#define VRML1_VRML1_DirectionalLight	20
#define VRML1_VRML1_AsciiText	21
#define VRML1_VRML1_Transform	22
#define VRML1_VRML1_Texture2Transform	23
#define VRML1_VRML1_Cylinder	24
#define VRML1_VRML1_Normal	25
#define VRML1_VRML1_WWWAnchor	26
#define VRML1_VRML1_NormalBinding	27
#define VRML1_VRML1_MaterialBinding	28
#define VRML1_VRML1_PointLight	29
#define VRML1_VRML1_IndexedFaceSet	30
#define VRML1_VRML1_Material	31
#define VRML1_VRML1_Coordinate3	32
#define VRML1_VRML1_Sphere	33

const char *stringVRML1_Type(indexT st);
char mapFieldTypeToEAItype (indexT st);
int mapEAItypeToFieldType (char st);
int convertToSFType (indexT st);

/* Table of built-in fieldIds */
extern const char *FIELDTYPES[];
extern const indexT FIELDTYPES_COUNT;
#define FIELDTYPE_SFFloat	0
#define FIELDTYPE_MFFloat	1
#define FIELDTYPE_SFRotation	2
#define FIELDTYPE_MFRotation	3
#define FIELDTYPE_SFVec3f	4
#define FIELDTYPE_MFVec3f	5
#define FIELDTYPE_SFBool	6
#define FIELDTYPE_MFBool	7
#define FIELDTYPE_SFInt32	8
#define FIELDTYPE_MFInt32	9
#define FIELDTYPE_SFNode	10
#define FIELDTYPE_MFNode	11
#define FIELDTYPE_SFColor	12
#define FIELDTYPE_MFColor	13
#define FIELDTYPE_SFColorRGBA	14
#define FIELDTYPE_MFColorRGBA	15
#define FIELDTYPE_SFTime	16
#define FIELDTYPE_MFTime	17
#define FIELDTYPE_SFString	18
#define FIELDTYPE_MFString	19
#define FIELDTYPE_SFVec2f	20
#define FIELDTYPE_MFVec2f	21
#define FIELDTYPE_SFImage	22
#define FIELDTYPE_FreeWRLPTR	23
#define FIELDTYPE_SFVec3d	24
#define FIELDTYPE_MFVec3d	25
#define FIELDTYPE_SFDouble	26
#define FIELDTYPE_MFDouble	27
#define FIELDTYPE_SFMatrix3f	28
#define FIELDTYPE_MFMatrix3f	29
#define FIELDTYPE_SFMatrix3d	30
#define FIELDTYPE_MFMatrix3d	31
#define FIELDTYPE_SFMatrix4f	32
#define FIELDTYPE_MFMatrix4f	33
#define FIELDTYPE_SFMatrix4d	34
#define FIELDTYPE_MFMatrix4d	35
#define FIELDTYPE_SFVec2d	36
#define FIELDTYPE_MFVec2d	37
#define FIELDTYPE_SFVec4f	38
#define FIELDTYPE_MFVec4f	39
#define FIELDTYPE_SFVec4d	40
#define FIELDTYPE_MFVec4d	41

/*cstruct*/
struct Multi_Float { int n; float  *p; };
struct SFRotation { float c[4]; };
struct Multi_Rotation { int n; struct SFRotation  *p; };

struct Multi_Vec3f { int n; struct SFColor  *p; };
/*cstruct*/
struct Multi_Bool { int n; int  *p; };
/*cstruct*/
struct Multi_Int32 { int n; int  *p; };

struct Multi_Node { int n; void * *p; };
struct SFColor { float c[3]; };
struct Multi_Color { int n; struct SFColor  *p; };
struct SFColorRGBA { float c[4]; };
struct Multi_ColorRGBA { int n; struct SFColorRGBA  *p; };
/*cstruct*/
struct Multi_Time { int n; double  *p; };
/*cstruct*/
struct Multi_String { int n; struct Uni_String * *p; };
struct SFVec2f { float c[2]; };
struct Multi_Vec2f { int n; struct SFVec2f  *p; };
/*cstruct*/
/*cstruct*/
struct SFVec3d { double c[3]; };
struct Multi_Vec3d { int n; struct SFVec3d  *p; };
/*cstruct*/
struct Multi_Double { int n; double  *p; };
struct SFMatrix3f { float c[9]; };
struct Multi_Matrix3f { int n; struct SFMatrix3f  *p; };
struct SFMatrix3d { double c[9]; };
struct Multi_Matrix3d { int n; struct SFMatrix3d  *p; };
struct SFMatrix4f { float c[16]; };
struct Multi_Matrix4f { int n; struct SFMatrix4f  *p; };
struct SFMatrix4d { double c[16]; };
struct Multi_Matrix4d { int n; struct SFMatrix4d  *p; };
struct SFVec2d { double c[2]; };
struct Multi_Vec2d { int n; struct SFVec2d  *p; };
struct SFVec4f { float c[4]; };
struct Multi_Vec4f { int n; struct SFVec4f  *p; };
struct SFVec4d { double c[4]; };
struct Multi_Vec4d { int n; struct SFVec4d  *p; };
const char *stringFieldtypeType(indexT st);

/* Table of built-in nodeIds */
extern const char *NODES[];
extern const indexT NODES_COUNT;

/* and now the structs for the nodetypes */ 
const char *stringNodeType(indexT st);

/* First, a generic struct, contains only the common elements */
struct X3D_Node {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
};
#define X3D_NODE(node) ((struct X3D_Node*)node)
#define X3D_GROUP(node) ((struct X3D_Group*)node)
#define X3D_STATICGROUP(node) ((struct X3D_StaticGroup*)node)
#define X3D_ANCHOR(node) ((struct X3D_Anchor*)node)
#define X3D_COLLISION(node) ((struct X3D_Collision*)node)
#define X3D_COMPOSEDSHADER(node) ((struct X3D_ComposedShader*)node)
#define X3D_PACKAGEDSHADER(node) ((struct X3D_PackagedShader*)node)
#define X3D_PROGRAMSHADER(node) ((struct X3D_ProgramShader*)node)
#define X3D_SHADERPROGRAM(node) ((struct X3D_ShaderProgram*)node)
#define X3D_SHAPE(node) ((struct X3D_Shape*)node)
#define X3D_VISIBILITYSENSOR(node) ((struct X3D_VisibilitySensor*)node)
#define X3D_BILLBOARD(node) ((struct X3D_Billboard*)node)
#define X3D_INLINE(node) ((struct X3D_Inline*)node)
#define X3D_SWITCH(node) ((struct X3D_Switch*)node)
#define X3D_SCRIPT(node) ((struct X3D_Script*)node)
#define X3D_VIEWPOINT(node) ((struct X3D_Viewpoint*)node)
#define X3D_LODNODE(node) ((struct X3D_LOD*)node)
#define X3D_TRANSFORM(node) ((struct X3D_Transform*)node)
#define X3D_PROXIMITYSENSOR(node) ((struct X3D_ProximitySensor*)node)
#define X3D_POINTLIGHT(node) ((struct X3D_PointLight*)node)
#define X3D_SPOTLIGHT(node) ((struct X3D_SpotLight*)node)
#define X3D_DIRECTIONALLIGHT(node) ((struct X3D_DirectionalLight*)node)
#define X3D_INDEXEDFACESET(node) ((struct X3D_IndexedFaceSet*)node)
#define VRML1_INDEXEDFACESET(node) ((struct X3D_VRML1_IndexedFaceSet*)node)
#define VRML1_SEPARATOR(node) ((struct X3D_VRML1_Separator*)node)
#define X3D_ELEVATIONGRID(node) ((struct X3D_ElevationGrid*)node)
#define X3D_INDEXEDTRIANGLEFANSET(node) ((struct X3D_IndexedTriangleFanSet*)node)
#define X3D_INDEXEDTRIANGLESET(node) ((struct X3D_IndexedTriangleSet*)node)
#define X3D_INDEXEDTRIANGLESTRIPSET(node) ((struct X3D_IndexedTriangleStripSet*)node)
#define X3D_TRIANGLEFANSET(node) ((struct X3D_TriangleFanSet*)node)
#define X3D_TRIANGLESET(node) ((struct X3D_TriangleSet*)node)
#define X3D_TRIANGLESTRIPSET(node) ((struct X3D_TriangleStripSet*)node)
#define X3D_GEOORIGIN(node) ((struct X3D_GeoOrigin*)node)
#define X3D_GEOLOD(node) ((struct X3D_GeoLOD*)node)
#define X3D_GEOCOORD(node) ((struct X3D_GeoCoordinate*)node)
#define X3D_GEOVIEWPOINT(node) ((struct X3D_GeoViewpoint*)node)
#define X3D_GEOELEVATIONGRID(node) ((struct X3D_GeoElevationGrid*)node)
#define X3D_GEOLOCATION(node) ((struct X3D_GeoLocation*)node)
#define X3D_GEOTRANSFORM(node) ((struct X3D_GeoTransform*)node)
#define X3D_GEOPROXIMITYSENSOR(node) ((struct X3D_GeoProximitySensor*)node)
#undef DEBUG_VALIDNODE
#ifdef DEBUG_VALIDNODE	
#define X3D_NODE_CHECK(node) checkNode(node,__FILE__,__LINE__)
#define MARK_EVENT(node,offset) mark_event_check(node,offset,__FILE__,__LINE__)
#else
#define X3D_NODE_CHECK(node)
#define MARK_EVENT(node,offset)	mark_event(node,offset)
#endif
#define COPY_SFVEC3F_TO_POINT_XYZ(too,from) { too.x = from[0]; too.y = from[1]; too.z = from[2];}
#define COPY_POINT_XYZ_TO_SFVEC3F(too,from) { too[0] = from.x; too[1] = from.y; too[2] = from.z;}
#define offsetPointer_deref(t, me, offs) ((t)(((char*)(me))+offs))

/* now, generated structures for each VRML/X3D Node*/
/***********************/
struct X3D_Anchor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * _parentResource;
	struct Multi_Node _sortedChildren;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Multi_Node children;
	struct Uni_String *description;
	void *metadata;
	struct Multi_String parameter;
	struct Multi_Node removeChildren;
	struct Multi_String url;
};
extern struct X3D_Virt virt_Anchor;
/***********************/
struct X3D_Appearance {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *fillProperties;
	void *lineProperties;
	void *material;
	void *metadata;
	struct Multi_Node shaders;
	void *texture;
	void *textureTransform;
};
extern struct X3D_Virt virt_Appearance;
/***********************/
struct X3D_Arc2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __numPoints;
	void *__oldmetadata;
	void * __points;
	float endAngle;
	void *metadata;
	float radius;
	float startAngle;
};
extern struct X3D_Virt virt_Arc2D;
/***********************/
struct X3D_ArcClose2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __numPoints;
	void *__oldmetadata;
	void * __points;
	struct Uni_String *closureType;
	float endAngle;
	void *metadata;
	float radius;
	int solid;
	float startAngle;
};
extern struct X3D_Virt virt_ArcClose2D;
/***********************/
struct X3D_AudioClip {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	double __inittime;
	void * __localFileName;
	void *__oldmetadata;
	int __sourceNumber;
	void * _parentResource;
	struct Uni_String *description;
	double duration_changed;
	double elapsedTime;
	int isActive;
	int isPaused;
	int loop;
	void *metadata;
	double pauseTime;
	float pitch;
	double resumeTime;
	double startTime;
	double stopTime;
	struct Multi_String url;
};
extern struct X3D_Virt virt_AudioClip;
/***********************/
struct X3D_AudioControl {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __oldEnabled;
	double __oldLen;
	void *__oldmetadata;
	float deltaFloatVal;
	int deltaInt32Val;
	struct SFColor direction;
	int enabled;
	float intensity;
	int isActive;
	struct SFColor location;
	float maxBack;
	float maxDelta;
	float maxFront;
	void *metadata;
	float minBack;
	float minFront;
	float panFloatVal;
	int panInt32Val;
	struct Uni_String *source;
	float volumeFloatVal;
	int volumeInt32Val;
};
extern struct X3D_Virt virt_AudioControl;
/***********************/
struct X3D_Background {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __BGNumber;
	void *__backTexture;
	void *__bottomTexture;
	void * __colours;
	void *__frontTexture;
	void *__leftTexture;
	void *__oldmetadata;
	void * __points;
	int __quadcount;
	void *__rightTexture;
	int __textureright;
	void *__topTexture;
	void * _parentResource;
	struct Multi_String backUrl;
	double bindTime;
	struct Multi_String bottomUrl;
	struct Multi_String frontUrl;
	struct Multi_Float groundAngle;
	struct Multi_Color groundColor;
	int isBound;
	struct Multi_String leftUrl;
	void *metadata;
	struct Multi_String rightUrl;
	int set_bind;
	struct Multi_Float skyAngle;
	struct Multi_Color skyColor;
	struct Multi_String topUrl;
	float transparency;
};
extern struct X3D_Virt virt_Background;
/***********************/
struct X3D_Billboard {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	double _rotationAngle;
	struct Multi_Node _sortedChildren;
	struct Multi_Node addChildren;
	struct SFColor axisOfRotation;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Multi_Node children;
	void *metadata;
	struct Multi_Node removeChildren;
};
extern struct X3D_Virt virt_Billboard;
/***********************/
struct X3D_BooleanFilter {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int inputFalse;
	int inputNegate;
	int inputTrue;
	void *metadata;
	int set_boolean;
};
extern struct X3D_Virt virt_BooleanFilter;
/***********************/
struct X3D_BooleanSequencer {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Bool keyValue;
	void *metadata;
	int next;
	int previous;
	float set_fraction;
	int value_changed;
};
extern struct X3D_Virt virt_BooleanSequencer;
/***********************/
struct X3D_BooleanToggle {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	int set_boolean;
	int toggle;
};
extern struct X3D_Virt virt_BooleanToggle;
/***********************/
struct X3D_BooleanTrigger {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	double set_triggerTime;
	int triggerTrue;
};
extern struct X3D_Virt virt_BooleanTrigger;
/***********************/
struct X3D_Box {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * __points;
	void *metadata;
	struct SFColor size;
	int solid;
};
extern struct X3D_Virt virt_Box;
/***********************/
struct X3D_Circle2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __numPoints;
	void *__oldmetadata;
	void * __points;
	void *metadata;
	float radius;
};
extern struct X3D_Virt virt_Circle2D;
/***********************/
struct X3D_ClipPlane {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int enabled;
	void *metadata;
	struct SFVec4f plane;
};
extern struct X3D_Virt virt_ClipPlane;
/***********************/
struct X3D_Collision {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __hit;
	void *__oldmetadata;
	struct Multi_Node _sortedChildren;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Multi_Node children;
	int collide;
	double collideTime;
	int enabled;
	void *metadata;
	void *proxy;
	struct Multi_Node removeChildren;
};
extern struct X3D_Virt virt_Collision;
/***********************/
struct X3D_Color {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Color color;
	void *metadata;
};
extern struct X3D_Virt virt_Color;
/***********************/
struct X3D_ColorInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Color keyValue;
	void *metadata;
	float set_fraction;
	struct SFColor value_changed;
};
extern struct X3D_Virt virt_ColorInterpolator;
/***********************/
struct X3D_ColorRGBA {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_ColorRGBA color;
	void *metadata;
};
extern struct X3D_Virt virt_ColorRGBA;
/***********************/
struct X3D_ComposedCubeMapTexture {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *back;
	void *bottom;
	void *front;
	void *left;
	void *metadata;
	void *right;
	void *top;
};
extern struct X3D_Virt virt_ComposedCubeMapTexture;
/***********************/
struct X3D_ComposedShader {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __initialized;
	void *__oldmetadata;
	struct Multi_Int32 __shaderIDS;
	void * __shaderObj;
	int activate;
	int isSelected;
	int isValid;
	struct Uni_String *language;
	void *metadata;
	struct Multi_Node parts;
};
extern struct X3D_Virt virt_ComposedShader;
/***********************/
struct X3D_Cone {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void * __botpoints;
	void * __normals;
	void *__oldmetadata;
	void * __sidepoints;
	int bottom;
	float bottomRadius;
	float height;
	void *metadata;
	int side;
	int solid;
};
extern struct X3D_Virt virt_Cone;
/***********************/
struct X3D_Contour2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Node addChildren;
	struct Multi_Node children;
	void *metadata;
	struct Multi_Node removeChildren;
};
extern struct X3D_Virt virt_Contour2D;
/***********************/
struct X3D_ContourPolyLine2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
};
extern struct X3D_Virt virt_ContourPolyLine2D;
/***********************/
struct X3D_Coordinate {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Multi_Vec3f point;
};
extern struct X3D_Virt virt_Coordinate;
/***********************/
struct X3D_CoordinateInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Vec3f keyValue;
	void *metadata;
	float set_fraction;
	struct Multi_Vec3f value_changed;
};
extern struct X3D_Virt virt_CoordinateInterpolator;
/***********************/
struct X3D_CoordinateInterpolator2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Vec2f keyValue;
	void *metadata;
	float set_fraction;
	struct Multi_Vec2f value_changed;
};
extern struct X3D_Virt virt_CoordinateInterpolator2D;
/***********************/
struct X3D_Cylinder {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void * __normals;
	void *__oldmetadata;
	void * __points;
	int bottom;
	float height;
	void *metadata;
	float radius;
	int side;
	int solid;
	int top;
};
extern struct X3D_Virt virt_Cylinder;
/***********************/
struct X3D_CylinderSensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __oldEnabled;
	void *__oldmetadata;
	int _dlchange;
	struct SFRotation _oldrotation;
	struct SFColor _oldtrackPoint;
	struct SFColor _origPoint;
	float _radius;
	int autoOffset;
	struct Uni_String *description;
	float diskAngle;
	int enabled;
	int isActive;
	int isOver;
	float maxAngle;
	void *metadata;
	float minAngle;
	float offset;
	struct SFRotation rotation_changed;
	struct SFColor trackPoint_changed;
};
extern struct X3D_Virt virt_CylinderSensor;
/***********************/
struct X3D_DirectionalLight {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	float ambientIntensity;
	struct SFColor color;
	struct SFColor direction;
	int global;
	float intensity;
	void *metadata;
	int on;
};
extern struct X3D_Virt virt_DirectionalLight;
/***********************/
struct X3D_Disk2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __numPoints;
	void *__oldmetadata;
	void * __points;
	int __simpleDisk;
	void * __texCoords;
	float innerRadius;
	void *metadata;
	float outerRadius;
	int solid;
};
extern struct X3D_Virt virt_Disk2D;
/***********************/
struct X3D_EaseInEaseOut {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Vec2f easeInEaseOut;
	struct Multi_Float key;
	void *metadata;
	float modifiedFraction_changed;
	float set_fraction;
};
extern struct X3D_Virt virt_EaseInEaseOut;
/***********************/
struct X3D_ElevationGrid {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Int32 _coordIndex;
	struct Multi_Node attrib;
	int ccw;
	void *color;
	int colorPerVertex;
	float creaseAngle;
	void *fogCoord;
	struct Multi_Float height;
	void *metadata;
	void *normal;
	int normalPerVertex;
	struct Multi_Float set_height;
	int solid;
	void *texCoord;
	int xDimension;
	float xSpacing;
	int zDimension;
	float zSpacing;
};
extern struct X3D_Virt virt_ElevationGrid;
/***********************/
struct X3D_Extrusion {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int beginCap;
	int ccw;
	int convex;
	float creaseAngle;
	struct Multi_Vec2f crossSection;
	int endCap;
	void *metadata;
	struct Multi_Rotation orientation;
	struct Multi_Vec2f scale;
	struct Multi_Vec2f set_crossSection;
	struct Multi_Rotation set_orientation;
	struct Multi_Vec2f set_scale;
	struct Multi_Vec3f set_spine;
	int solid;
	struct Multi_Vec3f spine;
};
extern struct X3D_Virt virt_Extrusion;
/***********************/
struct X3D_FillProperties {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int filled;
	struct SFColor hatchColor;
	int hatchStyle;
	int hatched;
	void *metadata;
};
extern struct X3D_Virt virt_FillProperties;
/***********************/
struct X3D_FloatVertexAttribute {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Uni_String *name;
	int numComponents;
	struct Multi_Float value;
};
extern struct X3D_Virt virt_FloatVertexAttribute;
/***********************/
struct X3D_Fog {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __BGNumber;
	void *__oldmetadata;
	double bindTime;
	struct SFColor color;
	struct Uni_String *fogType;
	int isBound;
	void *metadata;
	int set_bind;
	float visibilityRange;
};
extern struct X3D_Virt virt_Fog;
/***********************/
struct X3D_FogCoordinate {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float depth;
	void *metadata;
};
extern struct X3D_Virt virt_FogCoordinate;
/***********************/
struct X3D_FontStyle {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_String family;
	int horizontal;
	struct Multi_String justify;
	struct Uni_String *language;
	int leftToRight;
	void *metadata;
	float size;
	float spacing;
	struct Uni_String *style;
	int topToBottom;
};
extern struct X3D_Virt virt_FontStyle;
/***********************/
struct X3D_GeneratedCubeMapTexture {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	int size;
	void *textureProperties;
	struct Uni_String *update;
};
extern struct X3D_Virt virt_GeneratedCubeMapTexture;
/***********************/
struct X3D_GeoCoordinate {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Int32 __geoSystem;
	struct Multi_Vec3f __movedCoords;
	void *__oldmetadata;
	void *geoOrigin;
	struct Multi_String geoSystem;
	void *metadata;
	struct Multi_Vec3d point;
};
extern struct X3D_Virt virt_GeoCoordinate;
/***********************/
struct X3D_GeoElevationGrid {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Int32 __geoSystem;
	void *__oldmetadata;
	struct Multi_Int32 _coordIndex;
	int ccw;
	void *color;
	int colorPerVertex;
	double creaseAngle;
	struct SFVec3d geoGridOrigin;
	void *geoOrigin;
	struct Multi_String geoSystem;
	struct Multi_Double height;
	void *metadata;
	void *normal;
	int normalPerVertex;
	struct Multi_Double set_height;
	int solid;
	void *texCoord;
	int xDimension;
	double xSpacing;
	float yScale;
	int zDimension;
	double zSpacing;
};
extern struct X3D_Virt virt_GeoElevationGrid;
/***********************/
struct X3D_GeoLOD {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__child1Node;
	void *__child2Node;
	void *__child3Node;
	void *__child4Node;
	int __childloadstatus;
	struct Multi_Int32 __geoSystem;
	int __inRange;
	int __level;
	struct SFVec3d __movedCoords;
	void *__oldmetadata;
	void *__rootUrl;
	int __rooturlloadstatus;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct SFVec3d center;
	struct Multi_String child1Url;
	struct Multi_String child2Url;
	struct Multi_String child3Url;
	struct Multi_String child4Url;
	struct Multi_Node children;
	void *geoOrigin;
	struct Multi_String geoSystem;
	int level_changed;
	void *metadata;
	float range;
	struct Multi_Node rootNode;
	struct Multi_String rootUrl;
};
extern struct X3D_Virt virt_GeoLOD;
/***********************/
struct X3D_GeoLocation {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Int32 __geoSystem;
	struct SFVec4d __localOrient;
	struct SFVec3d __movedCoords;
	struct Multi_Node __oldChildren;
	struct SFVec3d __oldgeoCoords;
	void *__oldmetadata;
	struct Multi_Node _sortedChildren;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Multi_Node children;
	struct SFVec3d geoCoords;
	void *geoOrigin;
	struct Multi_String geoSystem;
	void *metadata;
	struct Multi_Node removeChildren;
};
extern struct X3D_Virt virt_GeoLocation;
/***********************/
struct X3D_GeoMetadata {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Node data;
	void *metadata;
	struct Multi_String summary;
	struct Multi_String url;
};
extern struct X3D_Virt virt_GeoMetadata;
/***********************/
struct X3D_GeoOrigin {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Int32 __geoSystem;
	struct SFVec3d __movedCoords;
	struct Multi_String __oldMFString;
	struct SFVec3d __oldgeoCoords;
	void *__oldmetadata;
	struct SFVec3d geoCoords;
	struct Multi_String geoSystem;
	void *metadata;
	int rotateYUp;
};
extern struct X3D_Virt virt_GeoOrigin;
/***********************/
struct X3D_GeoPositionInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Int32 __geoSystem;
	struct Multi_Vec3d __movedValue;
	void *__oldKeyPtr;
	void *__oldKeyValuePtr;
	void *__oldmetadata;
	void *geoOrigin;
	struct Multi_String geoSystem;
	struct SFVec3d geovalue_changed;
	struct Multi_Float key;
	struct Multi_Vec3d keyValue;
	void *metadata;
	float set_fraction;
	struct SFColor value_changed;
};
extern struct X3D_Virt virt_GeoPositionInterpolator;
/***********************/
struct X3D_GeoProximitySensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Int32 __geoSystem;
	int __hit;
	struct SFVec4d __localOrient;
	struct SFVec3d __movedCoords;
	int __oldEnabled;
	struct SFVec3d __oldGeoCenter;
	struct SFColor __oldSize;
	void *__oldmetadata;
	struct SFColor __t1;
	struct SFRotation __t2;
	struct SFColor centerOfRotation_changed;
	int enabled;
	double enterTime;
	double exitTime;
	struct SFVec3d geoCenter;
	struct SFVec3d geoCoord_changed;
	void *geoOrigin;
	struct Multi_String geoSystem;
	int isActive;
	void *metadata;
	struct SFRotation orientation_changed;
	struct SFColor position_changed;
	struct SFColor size;
};
extern struct X3D_Virt virt_GeoProximitySensor;
/***********************/
struct X3D_GeoTouchSensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Int32 __geoSystem;
	int __oldEnabled;
	void *__oldmetadata;
	struct SFColor _oldhitNormal;
	struct SFColor _oldhitPoint;
	struct SFVec2f _oldhitTexCoord;
	struct Uni_String *description;
	int enabled;
	void *geoOrigin;
	struct Multi_String geoSystem;
	struct SFVec3d hitGeoCoord_changed;
	struct SFColor hitNormal_changed;
	struct SFColor hitPoint_changed;
	struct SFVec2f hitTexCoord_changed;
	int isActive;
	int isOver;
	void *metadata;
	double touchTime;
};
extern struct X3D_Virt virt_GeoTouchSensor;
/***********************/
struct X3D_GeoTransform {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __do_center;
	int __do_rotation;
	int __do_scale;
	int __do_scaleO;
	int __do_trans;
	struct Multi_Int32 __geoSystem;
	struct SFVec4d __localOrient;
	struct SFVec3d __movedCoords;
	struct Multi_Node __oldChildren;
	struct SFVec3d __oldGeoCenter;
	void *__oldmetadata;
	struct Multi_Node _sortedChildren;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Multi_Node children;
	struct SFVec3d geoCenter;
	void *geoOrigin;
	struct Multi_String geoSystem;
	void *metadata;
	struct Multi_Node removeChildren;
	struct SFRotation rotation;
	struct SFColor scale;
	struct SFRotation scaleOrientation;
	struct SFColor translation;
};
extern struct X3D_Virt virt_GeoTransform;
/***********************/
struct X3D_GeoViewpoint {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __BGNumber;
	struct Multi_Int32 __geoSystem;
	struct SFRotation __movedOrientation;
	struct SFVec3d __movedPosition;
	float __oldFieldOfView;
	int __oldHeadlight;
	int __oldJump;
	struct Multi_String __oldMFString;
	struct Uni_String *__oldSFString;
	void *__oldmetadata;
	double bindTime;
	struct Uni_String *description;
	float fieldOfView;
	void *geoOrigin;
	struct Multi_String geoSystem;
	int headlight;
	int isBound;
	int jump;
	void *metadata;
	struct Multi_String navType;
	struct SFRotation orientation;
	struct SFVec3d position;
	int set_bind;
	struct SFRotation set_orientation;
	struct SFVec3d set_position;
	float speedFactor;
};
extern struct X3D_Virt virt_GeoViewpoint;
/***********************/
struct X3D_Group {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Node FreeWRL_PROTOInterfaceNodes;
	int FreeWRL__protoDef;
	void *__oldmetadata;
	struct Multi_Node _sortedChildren;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Multi_Node children;
	void *metadata;
	struct Multi_Node removeChildren;
};
extern struct X3D_Virt virt_Group;
/***********************/
struct X3D_HAnimDisplacer {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Int32 coordIndex;
	struct Multi_Vec3f displacements;
	void *metadata;
	struct Uni_String *name;
	float weight;
};
extern struct X3D_Virt virt_HAnimDisplacer;
/***********************/
struct X3D_HAnimHumanoid {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct SFColor center;
	struct Multi_String info;
	struct Multi_Node joints;
	void *metadata;
	struct Uni_String *name;
	struct SFRotation rotation;
	struct SFColor scale;
	struct SFRotation scaleOrientation;
	struct Multi_Node segments;
	struct Multi_Node sites;
	struct Multi_Node skeleton;
	struct Multi_Node skin;
	void *skinCoord;
	void *skinNormal;
	struct SFColor translation;
	struct Uni_String *version;
	struct Multi_Node viewpoints;
};
extern struct X3D_Virt virt_HAnimHumanoid;
/***********************/
struct X3D_HAnimJoint {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __do_center;
	int __do_rotation;
	int __do_scale;
	int __do_scaleO;
	int __do_trans;
	void *__oldmetadata;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct SFColor center;
	struct Multi_Node children;
	struct Multi_Node displacers;
	struct SFRotation limitOrientation;
	struct Multi_Float llimit;
	void *metadata;
	struct Uni_String *name;
	struct Multi_Node removeChildren;
	struct SFRotation rotation;
	struct SFColor scale;
	struct SFRotation scaleOrientation;
	struct Multi_Int32 skinCoordIndex;
	struct Multi_Float skinCoordWeight;
	struct Multi_Float stiffness;
	struct SFColor translation;
	struct Multi_Float ulimit;
};
extern struct X3D_Virt virt_HAnimJoint;
/***********************/
struct X3D_HAnimSegment {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct SFColor centerOfMass;
	struct Multi_Node children;
	void *coord;
	struct Multi_Node displacers;
	float mass;
	void *metadata;
	struct Multi_Float momentsOfInertia;
	struct Uni_String *name;
	struct Multi_Node removeChildren;
};
extern struct X3D_Virt virt_HAnimSegment;
/***********************/
struct X3D_HAnimSite {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __do_center;
	int __do_rotation;
	int __do_scale;
	int __do_scaleO;
	int __do_trans;
	void *__oldmetadata;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct SFColor center;
	struct Multi_Node children;
	void *metadata;
	struct Uni_String *name;
	struct Multi_Node removeChildren;
	struct SFRotation rotation;
	struct SFColor scale;
	struct SFRotation scaleOrientation;
	struct SFColor translation;
};
extern struct X3D_Virt virt_HAnimSite;
/***********************/
struct X3D_ImageCubeMapTexture {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * _parentResource;
	void *metadata;
	void *textureProperties;
	struct Multi_String url;
};
extern struct X3D_Virt virt_ImageCubeMapTexture;
/***********************/
struct X3D_ImageTexture {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int __textureTableIndex;
	void * _parentResource;
	void *metadata;
	int repeatS;
	int repeatT;
	void *textureProperties;
	struct Multi_String url;
};
extern struct X3D_Virt virt_ImageTexture;
/***********************/
struct X3D_IndexedFaceSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Node attrib;
	int ccw;
	void *color;
	struct Multi_Int32 colorIndex;
	int colorPerVertex;
	int convex;
	void *coord;
	struct Multi_Int32 coordIndex;
	float creaseAngle;
	void *fogCoord;
	void *metadata;
	void *normal;
	struct Multi_Int32 normalIndex;
	int normalPerVertex;
	struct Multi_Int32 set_colorIndex;
	struct Multi_Int32 set_coordIndex;
	struct Multi_Int32 set_normalIndex;
	struct Multi_Int32 set_texCoordIndex;
	int solid;
	void *texCoord;
	struct Multi_Int32 texCoordIndex;
};
extern struct X3D_Virt virt_IndexedFaceSet;
/***********************/
struct X3D_IndexedLineSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void * __colours;
	void *__oldmetadata;
	int __segCount;
	void * __vertArr;
	void * __vertIndx;
	void * __vertexCount;
	void * __vertices;
	struct Multi_Node attrib;
	void *color;
	struct Multi_Int32 colorIndex;
	int colorPerVertex;
	void *coord;
	struct Multi_Int32 coordIndex;
	void *fogCoord;
	void *metadata;
	struct Multi_Int32 set_colorIndex;
	struct Multi_Int32 set_coordIndex;
};
extern struct X3D_Virt virt_IndexedLineSet;
/***********************/
struct X3D_IndexedTriangleFanSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Int32 _coordIndex;
	struct Multi_Node attrib;
	int ccw;
	void *color;
	int colorPerVertex;
	void *coord;
	void *fogCoord;
	struct Multi_Int32 index;
	void *metadata;
	void *normal;
	int normalPerVertex;
	struct Multi_Int32 set_index;
	int solid;
	void *texCoord;
};
extern struct X3D_Virt virt_IndexedTriangleFanSet;
/***********************/
struct X3D_IndexedTriangleSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Int32 _coordIndex;
	struct Multi_Node attrib;
	int ccw;
	void *color;
	int colorPerVertex;
	void *coord;
	void *fogCoord;
	struct Multi_Int32 index;
	void *metadata;
	void *normal;
	int normalPerVertex;
	struct Multi_Int32 set_index;
	int solid;
	void *texCoord;
};
extern struct X3D_Virt virt_IndexedTriangleSet;
/***********************/
struct X3D_IndexedTriangleStripSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Int32 _coordIndex;
	struct Multi_Node attrib;
	int ccw;
	void *color;
	int colorPerVertex;
	void *coord;
	void *fogCoord;
	struct Multi_Int32 index;
	void *metadata;
	void *normal;
	int normalPerVertex;
	struct Multi_Int32 set_index;
	int solid;
	void *texCoord;
};
extern struct X3D_Virt virt_IndexedTriangleStripSet;
/***********************/
struct X3D_Inline {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Node __children;
	void * __loadResource;
	int __loadstatus;
	void *__oldmetadata;
	void * _parentResource;
	struct Multi_Node _sortedChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	int load;
	void *metadata;
	struct Multi_String url;
};
extern struct X3D_Virt virt_Inline;
/***********************/
struct X3D_IntegerSequencer {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Int32 keyValue;
	void *metadata;
	int next;
	int previous;
	float set_fraction;
	int value_changed;
};
extern struct X3D_Virt virt_IntegerSequencer;
/***********************/
struct X3D_IntegerTrigger {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int integerKey;
	void *metadata;
	double set_triggerTime;
	int triggerValue;
};
extern struct X3D_Virt virt_IntegerTrigger;
/***********************/
struct X3D_KeySensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __oldEnabled;
	void *__oldmetadata;
	int actionKeyPress;
	int actionKeyRelease;
	int altKey;
	int controlKey;
	int enabled;
	int isActive;
	struct Uni_String *keyPress;
	struct Uni_String *keyRelease;
	void *metadata;
	int shiftKey;
};
extern struct X3D_Virt virt_KeySensor;
/***********************/
struct X3D_LOD {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __isX3D;
	void *__oldmetadata;
	void * _selected;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct SFColor center;
	struct Multi_Node children;
	int forceTransitions;
	struct Multi_Node level;
	int levelChanged;
	void *metadata;
	struct Multi_Float range;
	struct Multi_Node removeChildren;
};
extern struct X3D_Virt virt_LOD;
/***********************/
struct X3D_LineProperties {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int applied;
	int linetype;
	float linewidthScaleFactor;
	void *metadata;
};
extern struct X3D_Virt virt_LineProperties;
/***********************/
struct X3D_LineSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int __segCount;
	void * __vertArr;
	void * __vertIndx;
	struct Multi_Node attrib;
	void *color;
	void *coord;
	void *fogCoord;
	void *metadata;
	struct Multi_Int32 vertexCount;
};
extern struct X3D_Virt virt_LineSet;
/***********************/
struct X3D_LoadSensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	double __StartLoadTime;
	int __finishedloading;
	int __loading;
	int __oldEnabled;
	void *__oldmetadata;
	int enabled;
	int isActive;
	int isLoaded;
	double loadTime;
	void *metadata;
	float progress;
	double timeOut;
	struct Multi_Node watchList;
};
extern struct X3D_Virt virt_LoadSensor;
/***********************/
struct X3D_LocalFog {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct SFColor color;
	int enabled;
	struct Uni_String *fogType;
	void *metadata;
	float visibilityRange;
};
extern struct X3D_Virt virt_LocalFog;
/***********************/
struct X3D_Material {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct SFVec4f _amb;
	struct SFVec4f _dcol;
	struct SFVec4f _ecol;
	struct SFVec4f _scol;
	float _shin;
	float ambientIntensity;
	struct SFColor diffuseColor;
	struct SFColor emissiveColor;
	void *metadata;
	float shininess;
	struct SFColor specularColor;
	float transparency;
};
extern struct X3D_Virt virt_Material;
/***********************/
struct X3D_Matrix3VertexAttribute {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Uni_String *name;
	struct Multi_Matrix3f value;
};
extern struct X3D_Virt virt_Matrix3VertexAttribute;
/***********************/
struct X3D_Matrix4VertexAttribute {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Uni_String *name;
	struct Multi_Matrix4f value;
};
extern struct X3D_Virt virt_Matrix4VertexAttribute;
/***********************/
struct X3D_MetadataDouble {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Uni_String *name;
	struct Uni_String *reference;
	struct Multi_Double value;
};
extern struct X3D_Virt virt_MetadataDouble;
/***********************/
struct X3D_MetadataFloat {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Uni_String *name;
	struct Uni_String *reference;
	struct Multi_Float value;
};
extern struct X3D_Virt virt_MetadataFloat;
/***********************/
struct X3D_MetadataInteger {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Uni_String *name;
	struct Uni_String *reference;
	struct Multi_Int32 value;
};
extern struct X3D_Virt virt_MetadataInteger;
/***********************/
struct X3D_MetadataMFBool {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Bool setValue;
	double tickTime;
	struct Multi_Bool value;
	struct Multi_Bool valueChanged;
};
extern struct X3D_Virt virt_MetadataMFBool;
/***********************/
struct X3D_MetadataMFColor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Color setValue;
	double tickTime;
	struct Multi_Color value;
	struct Multi_Color valueChanged;
};
extern struct X3D_Virt virt_MetadataMFColor;
/***********************/
struct X3D_MetadataMFColorRGBA {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_ColorRGBA setValue;
	double tickTime;
	struct Multi_ColorRGBA value;
	struct Multi_ColorRGBA valueChanged;
};
extern struct X3D_Virt virt_MetadataMFColorRGBA;
/***********************/
struct X3D_MetadataMFDouble {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Double setValue;
	double tickTime;
	struct Multi_Double value;
	struct Multi_Double valueChanged;
};
extern struct X3D_Virt virt_MetadataMFDouble;
/***********************/
struct X3D_MetadataMFFloat {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Float setValue;
	double tickTime;
	struct Multi_Float value;
	struct Multi_Float valueChanged;
};
extern struct X3D_Virt virt_MetadataMFFloat;
/***********************/
struct X3D_MetadataMFInt32 {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Int32 setValue;
	double tickTime;
	struct Multi_Int32 value;
	struct Multi_Int32 valueChanged;
};
extern struct X3D_Virt virt_MetadataMFInt32;
/***********************/
struct X3D_MetadataMFMatrix3d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Matrix3d setValue;
	double tickTime;
	struct Multi_Matrix3d value;
	struct Multi_Matrix3d valueChanged;
};
extern struct X3D_Virt virt_MetadataMFMatrix3d;
/***********************/
struct X3D_MetadataMFMatrix3f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Matrix3f setValue;
	double tickTime;
	struct Multi_Matrix3f value;
	struct Multi_Matrix3f valueChanged;
};
extern struct X3D_Virt virt_MetadataMFMatrix3f;
/***********************/
struct X3D_MetadataMFMatrix4d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Matrix4d setValue;
	double tickTime;
	struct Multi_Matrix4d value;
	struct Multi_Matrix4d valueChanged;
};
extern struct X3D_Virt virt_MetadataMFMatrix4d;
/***********************/
struct X3D_MetadataMFMatrix4f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Matrix4f setValue;
	double tickTime;
	struct Multi_Matrix4f value;
	struct Multi_Matrix4f valueChanged;
};
extern struct X3D_Virt virt_MetadataMFMatrix4f;
/***********************/
struct X3D_MetadataMFNode {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Node setValue;
	double tickTime;
	struct Multi_Node value;
	struct Multi_Node valueChanged;
};
extern struct X3D_Virt virt_MetadataMFNode;
/***********************/
struct X3D_MetadataMFRotation {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Rotation setValue;
	double tickTime;
	struct Multi_Rotation value;
	struct Multi_Rotation valueChanged;
};
extern struct X3D_Virt virt_MetadataMFRotation;
/***********************/
struct X3D_MetadataMFString {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_String setValue;
	double tickTime;
	struct Multi_String value;
	struct Multi_String valueChanged;
};
extern struct X3D_Virt virt_MetadataMFString;
/***********************/
struct X3D_MetadataMFTime {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Time setValue;
	double tickTime;
	struct Multi_Time value;
	struct Multi_Time valueChanged;
};
extern struct X3D_Virt virt_MetadataMFTime;
/***********************/
struct X3D_MetadataMFVec2d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec2d setValue;
	double tickTime;
	struct Multi_Vec2d value;
	struct Multi_Vec2d valueChanged;
};
extern struct X3D_Virt virt_MetadataMFVec2d;
/***********************/
struct X3D_MetadataMFVec2f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec2f setValue;
	double tickTime;
	struct Multi_Vec2f value;
	struct Multi_Vec2f valueChanged;
};
extern struct X3D_Virt virt_MetadataMFVec2f;
/***********************/
struct X3D_MetadataMFVec3d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec3d setValue;
	double tickTime;
	struct Multi_Vec3d value;
	struct Multi_Vec3d valueChanged;
};
extern struct X3D_Virt virt_MetadataMFVec3d;
/***********************/
struct X3D_MetadataMFVec3f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec3f setValue;
	double tickTime;
	struct Multi_Vec3f value;
	struct Multi_Vec3f valueChanged;
};
extern struct X3D_Virt virt_MetadataMFVec3f;
/***********************/
struct X3D_MetadataMFVec4d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec4d setValue;
	double tickTime;
	struct Multi_Vec4d value;
	struct Multi_Vec4d valueChanged;
};
extern struct X3D_Virt virt_MetadataMFVec4d;
/***********************/
struct X3D_MetadataMFVec4f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec4f setValue;
	double tickTime;
	struct Multi_Vec4f value;
	struct Multi_Vec4f valueChanged;
};
extern struct X3D_Virt virt_MetadataMFVec4f;
/***********************/
struct X3D_MetadataSFBool {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int setValue;
	double tickTime;
	int value;
	int valueChanged;
};
extern struct X3D_Virt virt_MetadataSFBool;
/***********************/
struct X3D_MetadataSFColor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor setValue;
	double tickTime;
	struct SFColor value;
	struct SFColor valueChanged;
};
extern struct X3D_Virt virt_MetadataSFColor;
/***********************/
struct X3D_MetadataSFColorRGBA {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColorRGBA setValue;
	double tickTime;
	struct SFColorRGBA value;
	struct SFColorRGBA valueChanged;
};
extern struct X3D_Virt virt_MetadataSFColorRGBA;
/***********************/
struct X3D_MetadataSFDouble {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	double setValue;
	double tickTime;
	double value;
	double valueChanged;
};
extern struct X3D_Virt virt_MetadataSFDouble;
/***********************/
struct X3D_MetadataSFFloat {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	float setValue;
	double tickTime;
	float value;
	float valueChanged;
};
extern struct X3D_Virt virt_MetadataSFFloat;
/***********************/
struct X3D_MetadataSFImage {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Int32 setValue;
	double tickTime;
	struct Multi_Int32 value;
	struct Multi_Int32 valueChanged;
};
extern struct X3D_Virt virt_MetadataSFImage;
/***********************/
struct X3D_MetadataSFInt32 {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int setValue;
	double tickTime;
	int value;
	int valueChanged;
};
extern struct X3D_Virt virt_MetadataSFInt32;
/***********************/
struct X3D_MetadataSFMatrix3d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFMatrix3d setValue;
	double tickTime;
	struct SFMatrix3d value;
	struct SFMatrix3d valueChanged;
};
extern struct X3D_Virt virt_MetadataSFMatrix3d;
/***********************/
struct X3D_MetadataSFMatrix3f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFMatrix3f setValue;
	double tickTime;
	struct SFMatrix3f value;
	struct SFMatrix3f valueChanged;
};
extern struct X3D_Virt virt_MetadataSFMatrix3f;
/***********************/
struct X3D_MetadataSFMatrix4d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFMatrix4d setValue;
	double tickTime;
	struct SFMatrix4d value;
	struct SFMatrix4d valueChanged;
};
extern struct X3D_Virt virt_MetadataSFMatrix4d;
/***********************/
struct X3D_MetadataSFMatrix4f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFMatrix4f setValue;
	double tickTime;
	struct SFMatrix4f value;
	struct SFMatrix4f valueChanged;
};
extern struct X3D_Virt virt_MetadataSFMatrix4f;
/***********************/
struct X3D_MetadataSFNode {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *setValue;
	double tickTime;
	void *value;
	void *valueChanged;
};
extern struct X3D_Virt virt_MetadataSFNode;
/***********************/
struct X3D_MetadataSFRotation {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFRotation setValue;
	double tickTime;
	struct SFRotation value;
	struct SFRotation valueChanged;
};
extern struct X3D_Virt virt_MetadataSFRotation;
/***********************/
struct X3D_MetadataSFString {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Uni_String *setValue;
	double tickTime;
	struct Uni_String *value;
	struct Uni_String *valueChanged;
};
extern struct X3D_Virt virt_MetadataSFString;
/***********************/
struct X3D_MetadataSFTime {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	double setValue;
	double tickTime;
	double value;
	double valueChanged;
};
extern struct X3D_Virt virt_MetadataSFTime;
/***********************/
struct X3D_MetadataSFVec2d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFVec2d setValue;
	double tickTime;
	struct SFVec2d value;
	struct SFVec2d valueChanged;
};
extern struct X3D_Virt virt_MetadataSFVec2d;
/***********************/
struct X3D_MetadataSFVec2f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFVec2f setValue;
	double tickTime;
	struct SFVec2f value;
	struct SFVec2f valueChanged;
};
extern struct X3D_Virt virt_MetadataSFVec2f;
/***********************/
struct X3D_MetadataSFVec3d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFVec3d setValue;
	double tickTime;
	struct SFVec3d value;
	struct SFVec3d valueChanged;
};
extern struct X3D_Virt virt_MetadataSFVec3d;
/***********************/
struct X3D_MetadataSFVec3f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor setValue;
	double tickTime;
	struct SFColor value;
	struct SFColor valueChanged;
};
extern struct X3D_Virt virt_MetadataSFVec3f;
/***********************/
struct X3D_MetadataSFVec4d {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFVec4d setValue;
	double tickTime;
	struct SFVec4d value;
	struct SFVec4d valueChanged;
};
extern struct X3D_Virt virt_MetadataSFVec4d;
/***********************/
struct X3D_MetadataSFVec4f {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFVec4f setValue;
	double tickTime;
	struct SFVec4f value;
	struct SFVec4f valueChanged;
};
extern struct X3D_Virt virt_MetadataSFVec4f;
/***********************/
struct X3D_MetadataSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Uni_String *name;
	struct Uni_String *reference;
	struct Multi_Node value;
};
extern struct X3D_Virt virt_MetadataSet;
/***********************/
struct X3D_MetadataString {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Uni_String *name;
	struct Uni_String *reference;
	struct Multi_String value;
};
extern struct X3D_Virt virt_MetadataString;
/***********************/
struct X3D_MidiControl {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int _bus;
	int _butPr;
	int _channel;
	int _controller;
	int _controllerIndex;
	int _deviceNameIndex;
	int _intControllerType;
	int _oldintValue;
	int _sentVel;
	int _vel;
	int autoButtonPress;
	int buttonPress;
	int channel;
	struct Uni_String *controller;
	int controllerPresent;
	struct Uni_String *controllerType;
	int deviceMaxVal;
	int deviceMinVal;
	struct Uni_String *deviceName;
	float floatValue;
	int highResolution;
	int intValue;
	int maxVal;
	void *metadata;
	int minVal;
	float pressLength;
	double pressTime;
	int useIntValue;
	int velocity;
};
extern struct X3D_Virt virt_MidiControl;
/***********************/
struct X3D_MovieTexture {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int __textureTableIndex;
	void * _parentResource;
	struct Uni_String *description;
	double duration_changed;
	double elapsedTime;
	int isActive;
	double isPaused;
	int loop;
	void *metadata;
	double pauseTime;
	int repeatS;
	int repeatT;
	double resumeTime;
	float speed;
	double startTime;
	double stopTime;
	void *textureProperties;
	struct Multi_String url;
};
extern struct X3D_Virt virt_MovieTexture;
/***********************/
struct X3D_MultiTexture {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * __params;
	float alpha;
	struct SFColor color;
	struct Multi_String function;
	void *metadata;
	struct Multi_String mode;
	struct Multi_String source;
	struct Multi_Node texture;
};
extern struct X3D_Virt virt_MultiTexture;
/***********************/
struct X3D_MultiTextureCoordinate {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Multi_Node texCoord;
};
extern struct X3D_Virt virt_MultiTextureCoordinate;
/***********************/
struct X3D_MultiTextureTransform {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Multi_Node textureTransform;
};
extern struct X3D_Virt virt_MultiTextureTransform;
/***********************/
struct X3D_NavigationInfo {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __BGNumber;
	void *__oldmetadata;
	struct Multi_Float avatarSize;
	double bindTime;
	int headlight;
	int isBound;
	void *metadata;
	int set_bind;
	float speed;
	int transitionComplete;
	double transitionTime;
	struct Multi_String transitionType;
	struct Multi_String type;
	float visibilityLimit;
};
extern struct X3D_Virt virt_NavigationInfo;
/***********************/
struct X3D_Normal {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Multi_Vec3f vector;
};
extern struct X3D_Virt virt_Normal;
/***********************/
struct X3D_NormalInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Vec3f keyValue;
	void *metadata;
	float set_fraction;
	struct Multi_Vec3f value_changed;
};
extern struct X3D_Virt virt_NormalInterpolator;
/***********************/
struct X3D_NurbsCurve {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Vec3f controlPoint;
	struct Multi_Float knot;
	void *metadata;
	int order;
	int tessellation;
	struct Multi_Float weight;
};
extern struct X3D_Virt virt_NurbsCurve;
/***********************/
struct X3D_NurbsCurve2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Vec2f controlPoint;
	struct Multi_Float knot;
	void *metadata;
	int order;
	int tessellation;
	struct Multi_Float weight;
};
extern struct X3D_Virt virt_NurbsCurve2D;
/***********************/
struct X3D_NurbsGroup {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Multi_Node children;
	void *metadata;
	struct Multi_Node removeChildren;
	float tessellationScale;
};
extern struct X3D_Virt virt_NurbsGroup;
/***********************/
struct X3D_NurbsPositionInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int dimension;
	struct Multi_Vec3f keyValue;
	struct Multi_Float keyWeight;
	struct Multi_Float knot;
	void *metadata;
	int order;
	float set_fraction;
	struct SFColor value_changed;
};
extern struct X3D_Virt virt_NurbsPositionInterpolator;
/***********************/
struct X3D_NurbsSurface {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int ccw;
	struct Multi_Vec3f controlPoint;
	struct Multi_Float knot;
	void *metadata;
	int order;
	void *texCoord;
	int uTessellation;
	int vTessellation;
	struct Multi_Float weight;
};
extern struct X3D_Virt virt_NurbsSurface;
/***********************/
struct X3D_NurbsTextureSurface {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
};
extern struct X3D_Virt virt_NurbsTextureSurface;
/***********************/
struct X3D_NurbsTrimmedSurface {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
};
extern struct X3D_Virt virt_NurbsTrimmedSurface;
/***********************/
struct X3D_OrientationInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Rotation keyValue;
	void *metadata;
	float set_fraction;
	struct SFRotation value_changed;
};
extern struct X3D_Virt virt_OrientationInterpolator;
/***********************/
struct X3D_PackagedShader {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * __shaderObj;
	int activate;
	int isSelected;
	int isValid;
	struct Uni_String *language;
	void *metadata;
	struct Multi_String url;
};
extern struct X3D_Virt virt_PackagedShader;
/***********************/
struct X3D_PixelTexture {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int __textureTableIndex;
	void * _parentResource;
	struct Multi_Int32 image;
	void *metadata;
	int repeatS;
	int repeatT;
	void *textureProperties;
};
extern struct X3D_Virt virt_PixelTexture;
/***********************/
struct X3D_PlaneSensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __oldEnabled;
	void *__oldmetadata;
	struct SFColor _oldtrackPoint;
	struct SFColor _oldtranslation;
	struct SFColor _origPoint;
	int autoOffset;
	struct Uni_String *description;
	int enabled;
	int isActive;
	int isOver;
	struct SFVec2f maxPosition;
	void *metadata;
	struct SFVec2f minPosition;
	struct SFColor offset;
	struct SFColor trackPoint_changed;
	struct SFColor translation_changed;
};
extern struct X3D_Virt virt_PlaneSensor;
/***********************/
struct X3D_PointLight {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	float ambientIntensity;
	struct SFColor attenuation;
	struct SFColor color;
	int global;
	float intensity;
	struct SFColor location;
	void *metadata;
	int on;
	float radius;
};
extern struct X3D_Virt virt_PointLight;
/***********************/
struct X3D_PointSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Node attrib;
	void *color;
	void *coord;
	void *fogCoord;
	void *metadata;
};
extern struct X3D_Virt virt_PointSet;
/***********************/
struct X3D_Polyline2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Vec2f lineSegments;
	void *metadata;
};
extern struct X3D_Virt virt_Polyline2D;
/***********************/
struct X3D_Polypoint2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	struct Multi_Vec2f point;
};
extern struct X3D_Virt virt_Polypoint2D;
/***********************/
struct X3D_PositionInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Vec3f keyValue;
	void *metadata;
	float set_fraction;
	struct SFColor value_changed;
};
extern struct X3D_Virt virt_PositionInterpolator;
/***********************/
struct X3D_PositionInterpolator2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Vec2f keyValue;
	void *metadata;
	float set_fraction;
	struct SFVec2f value_changed;
};
extern struct X3D_Virt virt_PositionInterpolator2D;
/***********************/
struct X3D_ProgramShader {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __initialized;
	void *__oldmetadata;
	struct Multi_Int32 __shaderIDS;
	int activate;
	int isSelected;
	int isValid;
	struct Uni_String *language;
	void *metadata;
	struct Multi_Node programs;
};
extern struct X3D_Virt virt_ProgramShader;
/***********************/
struct X3D_ProximitySensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __hit;
	int __oldEnabled;
	void *__oldmetadata;
	struct SFColor __t1;
	struct SFRotation __t2;
	struct SFColor center;
	struct SFColor centerOfRotation_changed;
	int enabled;
	double enterTime;
	double exitTime;
	int isActive;
	void *metadata;
	struct SFRotation orientation_changed;
	struct SFColor position_changed;
	struct SFColor size;
};
extern struct X3D_Virt virt_ProximitySensor;
/***********************/
struct X3D_Rectangle2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __numPoints;
	void *__oldmetadata;
	void * __points;
	void *metadata;
	struct SFVec2f size;
	int solid;
};
extern struct X3D_Virt virt_Rectangle2D;
/***********************/
struct X3D_ScalarInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Float keyValue;
	void *metadata;
	float set_fraction;
	float value_changed;
};
extern struct X3D_Virt virt_ScalarInterpolator;
/***********************/
struct X3D_Script {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * __scriptObj;
	void * _parentResource;
	int directOutput;
	void *metadata;
	int mustEvaluate;
	struct Multi_String url;
};
extern struct X3D_Virt virt_Script;
/***********************/
struct X3D_ShaderPart {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * _parentResource;
	void *metadata;
	struct Uni_String *type;
	struct Multi_String url;
};
extern struct X3D_Virt virt_ShaderPart;
/***********************/
struct X3D_ShaderProgram {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * __shaderObj;
	void * _parentResource;
	void *metadata;
	struct Uni_String *type;
	struct Multi_String url;
};
extern struct X3D_Virt virt_ShaderProgram;
/***********************/
struct X3D_Shape {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __Samples;
	int __occludeCheckCount;
	void *__oldmetadata;
	int __visible;
	void *appearance;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	void *geometry;
	void *metadata;
};
extern struct X3D_Virt virt_Shape;
/***********************/
struct X3D_Sound {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct SFColor direction;
	float intensity;
	struct SFColor location;
	float maxBack;
	float maxFront;
	void *metadata;
	float minBack;
	float minFront;
	float priority;
	void *source;
	int spatialize;
};
extern struct X3D_Virt virt_Sound;
/***********************/
struct X3D_Sphere {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * __points;
	void *metadata;
	float radius;
	int solid;
};
extern struct X3D_Virt virt_Sphere;
/***********************/
struct X3D_SphereSensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __oldEnabled;
	void *__oldmetadata;
	struct SFRotation _oldrotation;
	struct SFColor _oldtrackPoint;
	struct SFColor _origNormalizedPoint;
	struct SFColor _origPoint;
	float _radius;
	int autoOffset;
	struct Uni_String *description;
	int enabled;
	int isActive;
	int isOver;
	void *metadata;
	struct SFRotation offset;
	struct SFRotation rotation_changed;
	struct SFColor trackPoint_changed;
};
extern struct X3D_Virt virt_SphereSensor;
/***********************/
struct X3D_SplinePositionInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int closed;
	struct Multi_Float key;
	struct Multi_Vec3f keyValue;
	struct Multi_Vec3f keyVelocity;
	void *metadata;
	int normalizeVelocity;
	float set_fraction;
	struct SFColor value_changed;
};
extern struct X3D_Virt virt_SplinePositionInterpolator;
/***********************/
struct X3D_SplinePositionInterpolator2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int closed;
	struct Multi_Float key;
	struct Multi_Vec2f keyValue;
	struct Multi_Vec2f keyVelocity;
	void *metadata;
	int normalizeVelocity;
	float set_fraction;
	struct SFVec2f value_changed;
};
extern struct X3D_Virt virt_SplinePositionInterpolator2D;
/***********************/
struct X3D_SplineScalarInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int closed;
	struct Multi_Float key;
	struct Multi_Float keyValue;
	struct Multi_Float keyVelocity;
	void *metadata;
	int normalizeVelocity;
	float set_fraction;
	float value_changed;
};
extern struct X3D_Virt virt_SplineScalarInterpolator;
/***********************/
struct X3D_SpotLight {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	float ambientIntensity;
	struct SFColor attenuation;
	float beamWidth;
	struct SFColor color;
	float cutOffAngle;
	struct SFColor direction;
	int global;
	float intensity;
	struct SFColor location;
	void *metadata;
	int on;
	float radius;
};
extern struct X3D_Virt virt_SpotLight;
/***********************/
struct X3D_SquadOrientationInterpolator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Float key;
	struct Multi_Rotation keyValue;
	void *metadata;
	int normalizeVelocity;
	float set_fraction;
	struct SFRotation value_changed;
};
extern struct X3D_Virt virt_SquadOrientationInterpolator;
/***********************/
struct X3D_StaticGroup {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int __solid;
	int __transparency;
	struct Multi_Node _sortedChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Multi_Node children;
	void *metadata;
};
extern struct X3D_Virt virt_StaticGroup;
/***********************/
struct X3D_StringSensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __oldEnabled;
	void *__oldmetadata;
	int _initialized;
	int deletionAllowed;
	int enabled;
	struct Uni_String *enteredText;
	struct Uni_String *finalText;
	int isActive;
	void *metadata;
};
extern struct X3D_Virt virt_StringSensor;
/***********************/
struct X3D_Switch {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __isX3D;
	void *__oldmetadata;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Multi_Node children;
	struct Multi_Node choice;
	void *metadata;
	struct Multi_Node removeChildren;
	int whichChoice;
};
extern struct X3D_Virt virt_Switch;
/***********************/
struct X3D_Text {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	int __rendersub;
	void *fontStyle;
	struct Multi_Float length;
	struct Multi_Vec2f lineBounds;
	float maxExtent;
	void *metadata;
	struct SFColor origin;
	int solid;
	struct Multi_String string;
	struct SFVec2f textBounds;
};
extern struct X3D_Virt virt_Text;
/***********************/
struct X3D_TextureBackground {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __BGNumber;
	void * __colours;
	void *__oldmetadata;
	void * __points;
	int __quadcount;
	void * _parentResource;
	void *backTexture;
	double bindTime;
	void *bottomTexture;
	void *frontTexture;
	struct Multi_Float groundAngle;
	struct Multi_Color groundColor;
	int isBound;
	void *leftTexture;
	void *metadata;
	void *rightTexture;
	int set_bind;
	struct Multi_Float skyAngle;
	struct Multi_Color skyColor;
	void *topTexture;
	struct Multi_Float transparency;
};
extern struct X3D_Virt virt_TextureBackground;
/***********************/
struct X3D_TextureCoordinate {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec2f __compiledpoint;
	void * __lastParent;
	void *__oldmetadata;
	void *metadata;
	struct Multi_Vec2f point;
};
extern struct X3D_Virt virt_TextureCoordinate;
/***********************/
struct X3D_TextureCoordinateGenerator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __compiledmode;
	void *__oldmetadata;
	void *metadata;
	struct Uni_String *mode;
	struct Multi_Float parameter;
};
extern struct X3D_Virt virt_TextureCoordinateGenerator;
/***********************/
struct X3D_TextureProperties {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	float anisotropicDegree;
	struct SFColorRGBA borderColor;
	int borderWidth;
	struct Uni_String *boundaryModeR;
	struct Uni_String *boundaryModeS;
	struct Uni_String *boundaryModeT;
	int generateMipMaps;
	struct Uni_String *magnificationFilter;
	void *metadata;
	struct Uni_String *minificationFilter;
	struct Uni_String *textureCompression;
	float texturePriority;
};
extern struct X3D_Virt virt_TextureProperties;
/***********************/
struct X3D_TextureTransform {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct SFVec2f center;
	void *metadata;
	float rotation;
	struct SFVec2f scale;
	struct SFVec2f translation;
};
extern struct X3D_Virt virt_TextureTransform;
/***********************/
struct X3D_TimeSensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	double __ctflag;
	double __inittime;
	int __oldEnabled;
	void *__oldmetadata;
	double cycleInterval;
	double cycleTime;
	double elapsedTime;
	int enabled;
	float fraction_changed;
	int isActive;
	double isPaused;
	int loop;
	void *metadata;
	double pauseTime;
	double resumeTime;
	double startTime;
	double stopTime;
	double time;
};
extern struct X3D_Virt virt_TimeSensor;
/***********************/
struct X3D_TimeTrigger {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void *metadata;
	int set_boolean;
	double triggerTime;
};
extern struct X3D_Virt virt_TimeTrigger;
/***********************/
struct X3D_TouchSensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __oldEnabled;
	void *__oldmetadata;
	struct SFColor _oldhitNormal;
	struct SFColor _oldhitPoint;
	struct SFVec2f _oldhitTexCoord;
	struct Uni_String *description;
	int enabled;
	struct SFColor hitNormal_changed;
	struct SFColor hitPoint_changed;
	struct SFVec2f hitTexCoord_changed;
	int isActive;
	int isOver;
	void *metadata;
	double touchTime;
};
extern struct X3D_Virt virt_TouchSensor;
/***********************/
struct X3D_Transform {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __do_anything;
	int __do_center;
	int __do_rotation;
	int __do_scale;
	int __do_scaleO;
	int __do_trans;
	void *__oldmetadata;
	struct Multi_Node _sortedChildren;
	struct Multi_Node addChildren;
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct SFColor center;
	struct Multi_Node children;
	void *metadata;
	struct Multi_Node removeChildren;
	struct SFRotation rotation;
	struct SFColor scale;
	struct SFRotation scaleOrientation;
	struct SFColor translation;
};
extern struct X3D_Virt virt_Transform;
/***********************/
struct X3D_TriangleFanSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Int32 _coordIndex;
	struct Multi_Node attrib;
	int ccw;
	void *color;
	int colorPerVertex;
	void *coord;
	struct Multi_Int32 fanCount;
	void *fogCoord;
	void *metadata;
	void *normal;
	int normalPerVertex;
	int solid;
	void *texCoord;
};
extern struct X3D_Virt virt_TriangleFanSet;
/***********************/
struct X3D_TriangleSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Int32 _coordIndex;
	struct Multi_Node attrib;
	int ccw;
	void *color;
	int colorPerVertex;
	void *coord;
	void *fogCoord;
	void *metadata;
	void *normal;
	int normalPerVertex;
	int solid;
	void *texCoord;
};
extern struct X3D_Virt virt_TriangleSet;
/***********************/
struct X3D_TriangleSet2D {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	void * __texCoords;
	void *metadata;
	int solid;
	struct Multi_Vec2f vertices;
};
extern struct X3D_Virt virt_TriangleSet2D;
/***********************/
struct X3D_TriangleStripSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_Int32 _coordIndex;
	struct Multi_Node attrib;
	int ccw;
	void *color;
	int colorPerVertex;
	void *coord;
	void *fogCoord;
	void *metadata;
	void *normal;
	int normalPerVertex;
	int solid;
	struct Multi_Int32 stripCount;
	void *texCoord;
};
extern struct X3D_Virt virt_TriangleStripSet;
/***********************/
struct X3D_TwoSidedMaterial {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	float ambientIntensity;
	float backAmbientIntensity;
	struct SFColor backDiffuseColor;
	struct SFColor backEmissiveColor;
	float backShininess;
	struct SFColor backSpecularColor;
	float backTransparency;
	struct SFColor diffuseColor;
	struct SFColor emissiveColor;
	void *metadata;
	int separateBackColor;
	float shininess;
	struct SFColor specularColor;
	float transparency;
};
extern struct X3D_Virt virt_TwoSidedMaterial;
/***********************/
struct X3D_VRML1_AsciiText {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *_ILS;
	struct Uni_String *justification;
	float spacing;
	struct Multi_String string;
	struct Multi_Float width;
};
extern struct X3D_Virt virt_VRML1_AsciiText;
/***********************/
struct X3D_VRML1_Cone {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *_ILS;
	float bottomRadius;
	float height;
	struct Uni_String *parts;
};
extern struct X3D_Virt virt_VRML1_Cone;
/***********************/
struct X3D_VRML1_Coordinate3 {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec3f point;
};
extern struct X3D_Virt virt_VRML1_Coordinate3;
/***********************/
struct X3D_VRML1_Cube {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *_ILS;
	float depth;
	float height;
	float width;
};
extern struct X3D_Virt virt_VRML1_Cube;
/***********************/
struct X3D_VRML1_Cylinder {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *_ILS;
	float height;
	struct Uni_String *parts;
	float radius;
};
extern struct X3D_Virt virt_VRML1_Cylinder;
/***********************/
struct X3D_VRML1_DirectionalLight {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor color;
	struct SFColor direction;
	float intensity;
	int on;
};
extern struct X3D_Virt virt_VRML1_DirectionalLight;
/***********************/
struct X3D_VRML1_FontStyle {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Uni_String *family;
	float size;
	struct Uni_String *style;
};
extern struct X3D_Virt virt_VRML1_FontStyle;
/***********************/
struct X3D_VRML1_IndexedFaceSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int _ccw;
	void *_color;
	int _convex;
	void *_coord;
	int _cpv;
	float _creaseAngle;
	void *_normal;
	int _npv;
	int _solid;
	void *_texCoord;
	struct Multi_Int32 coordIndex;
	struct Multi_Int32 materialIndex;
	struct Multi_Int32 normalIndex;
	struct Multi_Int32 textureCoordIndex;
};
extern struct X3D_Virt virt_VRML1_IndexedFaceSet;
/***********************/
struct X3D_VRML1_IndexedLineSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *_ILS;
	struct Multi_Int32 coordIndex;
	struct Multi_Int32 materialIndex;
	struct Multi_Int32 normalIndex;
	struct Multi_Int32 textureCoordIndex;
};
extern struct X3D_Virt virt_VRML1_IndexedLineSet;
/***********************/
struct X3D_VRML1_Info {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Uni_String *string;
};
extern struct X3D_Virt virt_VRML1_Info;
/***********************/
struct X3D_VRML1_LOD {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor center;
	struct Multi_Float range;
};
extern struct X3D_Virt virt_VRML1_LOD;
/***********************/
struct X3D_VRML1_Material {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Color ambientColor;
	struct Multi_Color diffuseColor;
	struct Multi_Color emissiveColor;
	struct Multi_Float shininess;
	struct Multi_Color specularColor;
	struct Multi_Float transparency;
};
extern struct X3D_Virt virt_VRML1_Material;
/***********************/
struct X3D_VRML1_MaterialBinding {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int _Value;
	int _initialized;
	struct Uni_String *value;
};
extern struct X3D_Virt virt_VRML1_MaterialBinding;
/***********************/
struct X3D_VRML1_MatrixTransform {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFMatrix4f value;
};
extern struct X3D_Virt virt_VRML1_MatrixTransform;
/***********************/
struct X3D_VRML1_Normal {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec3f vector;
};
extern struct X3D_Virt virt_VRML1_Normal;
/***********************/
struct X3D_VRML1_NormalBinding {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int _Value;
	int _initialized;
	struct Uni_String *value;
};
extern struct X3D_Virt virt_VRML1_NormalBinding;
/***********************/
struct X3D_VRML1_OrthographicCamera {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	float focalDistance;
	float height;
	struct SFRotation orientation;
	struct SFColor position;
};
extern struct X3D_Virt virt_VRML1_OrthographicCamera;
/***********************/
struct X3D_VRML1_PerspectiveCamera {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	float focalDistance;
	float heightAngle;
	struct SFRotation orientation;
	struct SFColor position;
};
extern struct X3D_Virt virt_VRML1_PerspectiveCamera;
/***********************/
struct X3D_VRML1_PointLight {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor color;
	float intensity;
	struct SFColor location;
	int on;
};
extern struct X3D_Virt virt_VRML1_PointLight;
/***********************/
struct X3D_VRML1_PointSet {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int numPoints;
	int startIndex;
};
extern struct X3D_Virt virt_VRML1_PointSet;
/***********************/
struct X3D_VRML1_Rotation {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFRotation rotation;
};
extern struct X3D_Virt virt_VRML1_Rotation;
/***********************/
struct X3D_VRML1_Scale {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor scaleFactor;
};
extern struct X3D_Virt virt_VRML1_Scale;
/***********************/
struct X3D_VRML1_Separator {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Node VRML1children;
	struct Multi_Node _sortedChildren;
	struct Uni_String *renderCulling;
};
extern struct X3D_Virt virt_VRML1_Separator;
/***********************/
struct X3D_VRML1_ShapeHints {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int _faceValue;
	int _initialized;
	int _typeValue;
	int _vertValue;
	double creaseAngle;
	struct Uni_String *faceType;
	struct Uni_String *shapeType;
	struct Uni_String *vertexOrdering;
};
extern struct X3D_Virt virt_VRML1_ShapeHints;
/***********************/
struct X3D_VRML1_Sphere {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *_ILS;
	float radius;
};
extern struct X3D_Virt virt_VRML1_Sphere;
/***********************/
struct X3D_VRML1_SpotLight {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor color;
	float cutOffAngle;
	struct SFColor direction;
	float dropOffRate;
	float intensity;
	struct SFColor location;
	int on;
};
extern struct X3D_Virt virt_VRML1_SpotLight;
/***********************/
struct X3D_VRML1_Switch {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int whichChild;
};
extern struct X3D_Virt virt_VRML1_Switch;
/***********************/
struct X3D_VRML1_Texture2 {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __textureTableIndex;
	int _initialized;
	void * _parentResource;
	int _wrapS;
	int _wrapT;
	struct Multi_String filename;
	struct Multi_Int32 image;
	struct Uni_String *wrapS;
	struct Uni_String *wrapT;
};
extern struct X3D_Virt virt_VRML1_Texture2;
/***********************/
struct X3D_VRML1_Texture2Transform {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFVec2f center;
	float rotation;
	struct SFVec2f scaleFactor;
	struct SFVec2f translation;
};
extern struct X3D_Virt virt_VRML1_Texture2Transform;
/***********************/
struct X3D_VRML1_TextureCoordinate2 {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Multi_Vec2f point;
};
extern struct X3D_Virt virt_VRML1_TextureCoordinate2;
/***********************/
struct X3D_VRML1_Transform {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor center;
	struct SFRotation rotation;
	struct SFColor scaleFactor;
	struct SFRotation scaleOrientation;
	struct SFColor translation;
};
extern struct X3D_Virt virt_VRML1_Transform;
/***********************/
struct X3D_VRML1_Translation {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor translation;
};
extern struct X3D_Virt virt_VRML1_Translation;
/***********************/
struct X3D_VRML1_WWWAnchor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct Uni_String *description;
	struct Uni_String *map;
	struct Uni_String *name;
};
extern struct X3D_Virt virt_VRML1_WWWAnchor;
/***********************/
struct X3D_VRML1_WWWInline {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	struct SFColor bboxCenter;
	struct SFColor bboxSize;
	struct Uni_String *name;
};
extern struct X3D_Virt virt_VRML1_WWWInline;
/***********************/
struct X3D_Viewpoint {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __BGNumber;
	void *__oldmetadata;
	double bindTime;
	struct SFColor centerOfRotation;
	struct Uni_String *description;
	float fieldOfView;
	int isBound;
	int jump;
	void *metadata;
	struct SFRotation orientation;
	struct SFColor position;
	int set_bind;
};
extern struct X3D_Virt virt_Viewpoint;
/***********************/
struct X3D_VisibilitySensor {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	int __Samples;
	int __occludeCheckCount;
	int __oldEnabled;
	void *__oldmetadata;
	void * __points;
	int __visible;
	struct SFColor center;
	int enabled;
	double enterTime;
	double exitTime;
	int isActive;
	void *metadata;
	struct SFColor size;
};
extern struct X3D_Virt virt_VisibilitySensor;
/***********************/
struct X3D_WorldInfo {
       struct X3D_Virt *v;
       int _renderFlags; /*sensitive, etc */ 
       int _hit; 
       int _change; 
       void **_parents; 
       int _nparents; 
       int _nparalloc; 
       int _ichange; 
       double _dist; /*sorting for blending */ 
       float _extent[6]; /* used for boundingboxes - +-x, +-y, +-z */ 
       void *_intern; 
       int _nodeType; /* unique integer for each type */ 
       int referenceCount; /* if this reaches zero, nobody wants it anymore */ 
       int _defaultContainer; /* holds the container */
 	/*** node specific data: *****/
	void *__oldmetadata;
	struct Multi_String info;
	void *metadata;
	struct Uni_String *title;
};
extern struct X3D_Virt virt_WorldInfo;

extern const size_t *NODE_OFFSETS[];

int getSAI_X3DNodeType (int FreeWRLNodeType);

#endif /* __FREEWRL_STRUCTS_H__ */
